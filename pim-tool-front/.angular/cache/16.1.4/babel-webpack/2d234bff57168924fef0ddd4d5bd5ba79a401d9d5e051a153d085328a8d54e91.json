{"ast":null,"code":"/**\n * @license Angular v16.1.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { ɵglobal, ɵRuntimeError, Injectable, InjectionToken, Inject, APP_ID, CSP_NONCE, PLATFORM_ID, Optional, ViewEncapsulation, RendererStyleFlags2, ɵinternalCreateApplication, ErrorHandler, ɵsetDocument, PLATFORM_INITIALIZER, createPlatformFactory, platformCore, ɵTESTABILITY_GETTER, ɵTESTABILITY, Testability, NgZone, TestabilityRegistry, ɵINJECTOR_SCOPE, RendererFactory2, ApplicationModule, NgModule, SkipSelf, ɵɵinject, ApplicationRef, ɵConsole, forwardRef, ɵXSS_SECURITY_URL, SecurityContext, ɵallowSanitizationBypassAndThrow, ɵunwrapSafeValue, ɵ_sanitizeUrl, ɵ_sanitizeHtml, ɵbypassSanitizationTrustHtml, ɵbypassSanitizationTrustStyle, ɵbypassSanitizationTrustScript, ɵbypassSanitizationTrustUrl, ɵbypassSanitizationTrustResourceUrl, Injector, ENVIRONMENT_INITIALIZER, inject, ɵformatRuntimeError, makeEnvironmentProviders, ɵwithDomHydration, Version, makeStateKey as makeStateKey$1, TransferState as TransferState$1 } from '@angular/core';\nimport { ɵDomAdapter, ɵsetRootDomAdapter, ɵparseCookieValue, ɵgetDOM, isPlatformServer, DOCUMENT, ɵPLATFORM_BROWSER_ID, XhrFactory, CommonModule } from '@angular/common';\nexport { ɵgetDOM } from '@angular/common';\nimport { ɵwithHttpTransferCache } from '@angular/common/http';\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nclass GenericBrowserDomAdapter extends ɵDomAdapter {\n  constructor() {\n    super(...arguments);\n    this.supportsDOMEvents = true;\n  }\n}\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nclass BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    ɵsetRootDomAdapter(new BrowserDomAdapter());\n  }\n  onAndCancel(el, evt, listener) {\n    el.addEventListener(evt, listener);\n    return () => {\n      el.removeEventListener(evt, listener);\n    };\n  }\n  dispatchEvent(el, evt) {\n    el.dispatchEvent(evt);\n  }\n  remove(node) {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n  createElement(tagName, doc) {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createHtmlDocument() {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument() {\n    return document;\n  }\n  isElementNode(node) {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n  isShadowRoot(node) {\n    return node instanceof DocumentFragment;\n  }\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  getGlobalEventTarget(doc, target) {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getBaseHref(doc) {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement() {\n    baseElement = null;\n  }\n  getUserAgent() {\n    return window.navigator.userAgent;\n  }\n  getCookie(name) {\n    return ɵparseCookieValue(document.cookie, name);\n  }\n}\nlet baseElement = null;\nfunction getBaseElementHref() {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode;\nfunction relativePath(url) {\n  urlParsingNode = urlParsingNode || document.createElement('a');\n  urlParsingNode.setAttribute('href', url);\n  const pathName = urlParsingNode.pathname;\n  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\nclass BrowserGetTestability {\n  addToWindow(registry) {\n    ɵglobal['getAngularTestability'] = (elem, findInAncestors = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new ɵRuntimeError(5103 /* RuntimeErrorCode.TESTABILITY_NOT_FOUND */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Could not find testability for element.');\n      }\n      return testability;\n    };\n    ɵglobal['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n    ɵglobal['getAllAngularRootElements'] = () => registry.getAllRootElements();\n    const whenAllStable = callback => {\n      const testabilities = ɵglobal['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function (didWork_) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(testability => {\n        testability.whenStable(decrement);\n      });\n    };\n    if (!ɵglobal['frameworkStabilizers']) {\n      ɵglobal['frameworkStabilizers'] = [];\n    }\n    ɵglobal['frameworkStabilizers'].push(whenAllStable);\n  }\n  findTestabilityInTree(registry, elem, findInAncestors) {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (ɵgetDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, elem.host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\nclass BrowserXhr {\n  build() {\n    return new XMLHttpRequest();\n  }\n  static {\n    this.ɵfac = function BrowserXhr_Factory(t) {\n      return new (t || BrowserXhr)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: BrowserXhr,\n      factory: BrowserXhr.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nconst EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\nclass EventManager {\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(plugins, _zone) {\n    this._zone = _zone;\n    this._eventNameToPlugin = new Map();\n    plugins.forEach(plugin => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element, eventName, handler) {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone() {\n    return this._zone;\n  }\n  /** @internal */\n  _findPluginFor(eventName) {\n    let plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n    const plugins = this._plugins;\n    plugin = plugins.find(plugin => plugin.supports(eventName));\n    if (!plugin) {\n      throw new ɵRuntimeError(5101 /* RuntimeErrorCode.NO_PLUGIN_FOR_EVENT */, (typeof ngDevMode === 'undefined' || ngDevMode) && `No event manager plugin found for event ${eventName}`);\n    }\n    this._eventNameToPlugin.set(eventName, plugin);\n    return plugin;\n  }\n  static {\n    this.ɵfac = function EventManager_Factory(t) {\n      return new (t || EventManager)(i0.ɵɵinject(EVENT_MANAGER_PLUGINS), i0.ɵɵinject(i0.NgZone));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: EventManager,\n      factory: EventManager.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EventManager, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [EVENT_MANAGER_PLUGINS]\n      }]\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\nclass EventManagerPlugin {\n  constructor(_doc) {\n    this._doc = _doc;\n  }\n}\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\nclass SharedStylesHost {\n  constructor(doc, appId, nonce, platformId = {}) {\n    this.doc = doc;\n    this.appId = appId;\n    this.nonce = nonce;\n    this.platformId = platformId;\n    // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n    this.styleRef = new Map();\n    this.hostNodes = new Set();\n    this.styleNodesInDOM = this.collectServerRenderedStyles();\n    this.platformIsServer = isPlatformServer(platformId);\n    this.resetHostNodes();\n  }\n  addStyles(styles) {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, 1);\n      if (usageCount === 1) {\n        this.onStyleAdded(style);\n      }\n    }\n  }\n  removeStyles(styles) {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, -1);\n      if (usageCount <= 0) {\n        this.onStyleRemoved(style);\n      }\n    }\n  }\n  ngOnDestroy() {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    if (styleNodesInDOM) {\n      styleNodesInDOM.forEach(node => node.remove());\n      styleNodesInDOM.clear();\n    }\n    for (const style of this.getAllStyles()) {\n      this.onStyleRemoved(style);\n    }\n    this.resetHostNodes();\n  }\n  addHost(hostNode) {\n    this.hostNodes.add(hostNode);\n    for (const style of this.getAllStyles()) {\n      this.addStyleToHost(hostNode, style);\n    }\n  }\n  removeHost(hostNode) {\n    this.hostNodes.delete(hostNode);\n  }\n  getAllStyles() {\n    return this.styleRef.keys();\n  }\n  onStyleAdded(style) {\n    for (const host of this.hostNodes) {\n      this.addStyleToHost(host, style);\n    }\n  }\n  onStyleRemoved(style) {\n    const styleRef = this.styleRef;\n    styleRef.get(style)?.elements?.forEach(node => node.remove());\n    styleRef.delete(style);\n  }\n  collectServerRenderedStyles() {\n    const styles = this.doc.head?.querySelectorAll(`style[${APP_ID_ATTRIBUTE_NAME}=\"${this.appId}\"]`);\n    if (styles?.length) {\n      const styleMap = new Map();\n      styles.forEach(style => {\n        if (style.textContent != null) {\n          styleMap.set(style.textContent, style);\n        }\n      });\n      return styleMap;\n    }\n    return null;\n  }\n  changeUsageCount(style, delta) {\n    const map = this.styleRef;\n    if (map.has(style)) {\n      const styleRefValue = map.get(style);\n      styleRefValue.usage += delta;\n      return styleRefValue.usage;\n    }\n    map.set(style, {\n      usage: delta,\n      elements: []\n    });\n    return delta;\n  }\n  getStyleElement(host, style) {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    const styleEl = styleNodesInDOM?.get(style);\n    if (styleEl?.parentNode === host) {\n      // `styleNodesInDOM` cannot be undefined due to the above `styleNodesInDOM?.get`.\n      styleNodesInDOM.delete(style);\n      styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // This attribute is solely used for debugging purposes.\n        styleEl.setAttribute('ng-style-reused', '');\n      }\n      return styleEl;\n    } else {\n      const styleEl = this.doc.createElement('style');\n      if (this.nonce) {\n        styleEl.setAttribute('nonce', this.nonce);\n      }\n      styleEl.textContent = style;\n      if (this.platformIsServer) {\n        styleEl.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n      }\n      return styleEl;\n    }\n  }\n  addStyleToHost(host, style) {\n    const styleEl = this.getStyleElement(host, style);\n    host.appendChild(styleEl);\n    const styleRef = this.styleRef;\n    const styleElRef = styleRef.get(style)?.elements;\n    if (styleElRef) {\n      styleElRef.push(styleEl);\n    } else {\n      styleRef.set(style, {\n        elements: [styleEl],\n        usage: 1\n      });\n    }\n  }\n  resetHostNodes() {\n    const hostNodes = this.hostNodes;\n    hostNodes.clear();\n    // Re-add the head element back since this is the default host.\n    hostNodes.add(this.doc.head);\n  }\n  static {\n    this.ɵfac = function SharedStylesHost_Factory(t) {\n      return new (t || SharedStylesHost)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(APP_ID), i0.ɵɵinject(CSP_NONCE, 8), i0.ɵɵinject(PLATFORM_ID));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SharedStylesHost,\n      factory: SharedStylesHost.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SharedStylesHost, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [APP_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CSP_NONCE]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\nconst NAMESPACE_URIS = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/MathML/'\n};\nconst COMPONENT_REGEX = /%COMP%/g;\nconst COMPONENT_VARIABLE = '%COMP%';\nconst HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nconst CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = false;\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `false`. This will be changed in the next major version.\n * @publicApi\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken('RemoveStylesOnCompDestroy', {\n  providedIn: 'root',\n  factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT\n});\nfunction shimContentAttribute(componentShortId) {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction shimHostAttribute(componentShortId) {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\nfunction shimStylesContent(compId, styles) {\n  return styles.map(s => s.replace(COMPONENT_REGEX, compId));\n}\nclass DomRendererFactory2 {\n  constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc, platformId, ngZone, nonce = null) {\n    this.eventManager = eventManager;\n    this.sharedStylesHost = sharedStylesHost;\n    this.appId = appId;\n    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n    this.doc = doc;\n    this.platformId = platformId;\n    this.ngZone = ngZone;\n    this.nonce = nonce;\n    this.rendererByCompId = new Map();\n    this.platformIsServer = isPlatformServer(platformId);\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer);\n  }\n  createRenderer(element, type) {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {\n      // Domino does not support shadow DOM.\n      type = {\n        ...type,\n        encapsulation: ViewEncapsulation.Emulated\n      };\n    }\n    const renderer = this.getOrCreateRenderer(element, type);\n    // Renderers have different logic due to different encapsulation behaviours.\n    // Ex: for emulated, an attribute is added to the element.\n    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n      renderer.applyToHost(element);\n    } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n      renderer.applyStyles();\n    }\n    return renderer;\n  }\n  getOrCreateRenderer(element, type) {\n    const rendererByCompId = this.rendererByCompId;\n    let renderer = rendererByCompId.get(type.id);\n    if (!renderer) {\n      const doc = this.doc;\n      const ngZone = this.ngZone;\n      const eventManager = this.eventManager;\n      const sharedStylesHost = this.sharedStylesHost;\n      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n      const platformIsServer = this.platformIsServer;\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n          renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer);\n          break;\n        case ViewEncapsulation.ShadowDom:\n          return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce, platformIsServer);\n        default:\n          renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone, platformIsServer);\n          break;\n      }\n      renderer.onDestroy = () => rendererByCompId.delete(type.id);\n      rendererByCompId.set(type.id, renderer);\n    }\n    return renderer;\n  }\n  ngOnDestroy() {\n    this.rendererByCompId.clear();\n  }\n  static {\n    this.ɵfac = function DomRendererFactory2_Factory(t) {\n      return new (t || DomRendererFactory2)(i0.ɵɵinject(EventManager), i0.ɵɵinject(SharedStylesHost), i0.ɵɵinject(APP_ID), i0.ɵɵinject(REMOVE_STYLES_ON_COMPONENT_DESTROY), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(CSP_NONCE));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DomRendererFactory2,\n      factory: DomRendererFactory2.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomRendererFactory2, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: EventManager\n    }, {\n      type: SharedStylesHost\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [APP_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]\n      }]\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CSP_NONCE]\n      }]\n    }];\n  }, null);\n})();\nclass DefaultDomRenderer2 {\n  constructor(eventManager, doc, ngZone, platformIsServer) {\n    this.eventManager = eventManager;\n    this.doc = doc;\n    this.ngZone = ngZone;\n    this.platformIsServer = platformIsServer;\n    this.data = Object.create(null);\n    this.destroyNode = null;\n  }\n  destroy() {}\n  createElement(name, namespace) {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n    return this.doc.createElement(name);\n  }\n  createComment(value) {\n    return this.doc.createComment(value);\n  }\n  createText(value) {\n    return this.doc.createTextNode(value);\n  }\n  appendChild(parent, newChild) {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n  insertBefore(parent, newChild, refChild) {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n  removeChild(parent, oldChild) {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n  selectRootElement(selectorOrNode, preserveContent) {\n    let el = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) : selectorOrNode;\n    if (!el) {\n      throw new ɵRuntimeError(-5104 /* RuntimeErrorCode.ROOT_NODE_NOT_FOUND */, (typeof ngDevMode === 'undefined' || ngDevMode) && `The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n  parentNode(node) {\n    return node.parentNode;\n  }\n  nextSibling(node) {\n    return node.nextSibling;\n  }\n  setAttribute(el, name, value, namespace) {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n  removeAttribute(el, name, namespace) {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n  addClass(el, name) {\n    el.classList.add(name);\n  }\n  removeClass(el, name) {\n    el.classList.remove(name);\n  }\n  setStyle(el, style, value, flags) {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n  removeStyle(el, style, flags) {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n  setProperty(el, name, value) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n  setValue(node, value) {\n    node.nodeValue = value;\n  }\n  listen(target, event, callback) {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = ɵgetDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new Error(`Unsupported event target ${target} for event ${event}`);\n      }\n    }\n    return this.eventManager.addEventListener(target, event, this.decoratePreventDefault(callback));\n  }\n  decoratePreventDefault(eventHandler) {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return event => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior = this.platformIsServer ? this.ngZone.runGuarded(() => eventHandler(event)) : eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n      }\n      return undefined;\n    };\n  }\n}\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name, nameKind) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new ɵRuntimeError(5105 /* RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY */, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\nfunction isTemplateNode(node) {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  constructor(eventManager, sharedStylesHost, hostEl, component, doc, ngZone, nonce, platformIsServer) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.sharedStylesHost = sharedStylesHost;\n    this.hostEl = hostEl;\n    this.shadowRoot = hostEl.attachShadow({\n      mode: 'open'\n    });\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = shimStylesContent(component.id, component.styles);\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n  nodeOrShadowRoot(node) {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n  appendChild(parent, newChild) {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  insertBefore(parent, newChild, refChild) {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  removeChild(parent, oldChild) {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  parentNode(node) {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n  destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n}\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, compId) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.sharedStylesHost = sharedStylesHost;\n    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;\n    this.rendererUsageCount = 0;\n    this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;\n  }\n  applyStyles() {\n    this.sharedStylesHost.addStyles(this.styles);\n    this.rendererUsageCount++;\n  }\n  destroy() {\n    if (!this.removeStylesOnCompDestroy) {\n      return;\n    }\n    this.sharedStylesHost.removeStyles(this.styles);\n    this.rendererUsageCount--;\n    if (this.rendererUsageCount === 0) {\n      this.onDestroy?.();\n    }\n  }\n}\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer) {\n    const compId = appId + '-' + component.id;\n    super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, compId);\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n  applyToHost(element) {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n  createElement(parent, name) {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\nclass DomEventsPlugin extends EventManagerPlugin {\n  constructor(doc) {\n    super(doc);\n  }\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  supports(eventName) {\n    return true;\n  }\n  addEventListener(element, eventName, handler) {\n    element.addEventListener(eventName, handler, false);\n    return () => this.removeEventListener(element, eventName, handler);\n  }\n  removeEventListener(target, eventName, callback) {\n    return target.removeEventListener(eventName, callback);\n  }\n  static {\n    this.ɵfac = function DomEventsPlugin_Factory(t) {\n      return new (t || DomEventsPlugin)(i0.ɵɵinject(DOCUMENT));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DomEventsPlugin,\n      factory: DomEventsPlugin.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomEventsPlugin, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS = {\n  'alt': event => event.altKey,\n  'control': event => event.ctrlKey,\n  'meta': event => event.metaKey,\n  'shift': event => event.shiftKey\n};\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\nclass KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(doc) {\n    super(doc);\n  }\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  supports(eventName) {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  addEventListener(element, eventName, handler) {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName);\n    const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n    return this.manager.getZone().runOutsideAngular(() => {\n      return ɵgetDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName) {\n    const parts = eventName.toLowerCase().split('.');\n    const domEventName = parts.shift();\n    if (parts.length === 0 || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n    const key = KeyEventsPlugin._normalizeKey(parts.pop());\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event, fullKeyCode) {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space'; // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot'; // because '.' is used as a separator in event names\n    }\n\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey, handler, zone) {\n    return event => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n  /** @internal */\n  static _normalizeKey(keyName) {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n  static {\n    this.ɵfac = function KeyEventsPlugin_Factory(t) {\n      return new (t || KeyEventsPlugin)(i0.ɵɵinject(DOCUMENT));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: KeyEventsPlugin,\n      factory: KeyEventsPlugin.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(KeyEventsPlugin, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nfunction bootstrapApplication(rootComponent, options) {\n  return ɵinternalCreateApplication({\n    rootComponent,\n    ...createProvidersConfig(options)\n  });\n}\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nfunction createApplication(options) {\n  return ɵinternalCreateApplication(createProvidersConfig(options));\n}\nfunction createProvidersConfig(options) {\n  return {\n    appProviders: [...BROWSER_MODULE_PROVIDERS, ...(options?.providers ?? [])],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nfunction provideProtractorTestingSupport() {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\nfunction initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\nfunction errorHandler() {\n  return new ErrorHandler();\n}\nfunction _document() {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\nconst INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{\n  provide: PLATFORM_ID,\n  useValue: ɵPLATFORM_BROWSER_ID\n}, {\n  provide: PLATFORM_INITIALIZER,\n  useValue: initDomAdapter,\n  multi: true\n}, {\n  provide: DOCUMENT,\n  useFactory: _document,\n  deps: []\n}];\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nconst platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(typeof ngDevMode === 'undefined' || ngDevMode ? 'BrowserModule Providers Marker' : '');\nconst TESTABILITY_PROVIDERS = [{\n  provide: ɵTESTABILITY_GETTER,\n  useClass: BrowserGetTestability,\n  deps: []\n}, {\n  provide: ɵTESTABILITY,\n  useClass: Testability,\n  deps: [NgZone, TestabilityRegistry, ɵTESTABILITY_GETTER]\n}, {\n  provide: Testability,\n  useClass: Testability,\n  deps: [NgZone, TestabilityRegistry, ɵTESTABILITY_GETTER]\n}];\nconst BROWSER_MODULE_PROVIDERS = [{\n  provide: ɵINJECTOR_SCOPE,\n  useValue: 'root'\n}, {\n  provide: ErrorHandler,\n  useFactory: errorHandler,\n  deps: []\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: DomEventsPlugin,\n  multi: true,\n  deps: [DOCUMENT, NgZone, PLATFORM_ID]\n}, {\n  provide: EVENT_MANAGER_PLUGINS,\n  useClass: KeyEventsPlugin,\n  multi: true,\n  deps: [DOCUMENT]\n}, DomRendererFactory2, SharedStylesHost, EventManager, {\n  provide: RendererFactory2,\n  useExisting: DomRendererFactory2\n}, {\n  provide: XhrFactory,\n  useClass: BrowserXhr,\n  deps: []\n}, typeof ngDevMode === 'undefined' || ngDevMode ? {\n  provide: BROWSER_MODULE_PROVIDERS_MARKER,\n  useValue: true\n} : []];\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\nclass BrowserModule {\n  constructor(providersAlreadyPresent) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && providersAlreadyPresent) {\n      throw new ɵRuntimeError(5100 /* RuntimeErrorCode.BROWER_MODULE_ALREADY_LOADED */, `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` + `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n    }\n  }\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   *\n   * @deprecated Use {@link APP_ID} instead to set the application ID.\n   */\n  static withServerTransition(params) {\n    return {\n      ngModule: BrowserModule,\n      providers: [{\n        provide: APP_ID,\n        useValue: params.appId\n      }]\n    };\n  }\n  static {\n    this.ɵfac = function BrowserModule_Factory(t) {\n      return new (t || BrowserModule)(i0.ɵɵinject(BROWSER_MODULE_PROVIDERS_MARKER, 12));\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: BrowserModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n      imports: [CommonModule, ApplicationModule]\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BrowserModule, [{\n    type: NgModule,\n    args: [{\n      providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n      exports: [CommonModule, ApplicationModule]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [BROWSER_MODULE_PROVIDERS_MARKER]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nfunction createMeta() {\n  return new Meta(ɵɵinject(DOCUMENT));\n}\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\nclass Meta {\n  constructor(_doc) {\n    this._doc = _doc;\n    this._dom = ɵgetDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag, forceCreation = false) {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags, forceCreation = false) {\n    if (!tags) return [];\n    return tags.reduce((result, tag) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector) {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector) {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag, selector) {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta = this.getTag(selector);\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector) {\n    this.removeTagElement(this.getTag(attrSelector));\n  }\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta) {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n  _getOrCreateElement(meta, forceCreation = false) {\n    if (!forceCreation) {\n      const selector = this._parseSelector(meta);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n    const element = this._dom.createElement('meta');\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n  _setMetaElementAttributes(tag, el) {\n    Object.keys(tag).forEach(prop => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n    return el;\n  }\n  _parseSelector(tag) {\n    const attr = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n  _containsAttributes(tag, elem) {\n    return Object.keys(tag).every(key => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n  }\n  _getMetaKeyMap(prop) {\n    return META_KEYS_MAP[prop] || prop;\n  }\n  static {\n    this.ɵfac = function Meta_Factory(t) {\n      return new (t || Meta)(i0.ɵɵinject(DOCUMENT));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Meta,\n      factory: function Meta_Factory(t) {\n        let r = null;\n        if (t) {\n          r = new t();\n        } else {\n          r = createMeta();\n        }\n        return r;\n      },\n      providedIn: 'root'\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Meta, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: createMeta,\n      deps: []\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP = {\n  httpEquiv: 'http-equiv'\n};\n\n/**\n * Factory to create Title service.\n */\nfunction createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\nclass Title {\n  constructor(_doc) {\n    this._doc = _doc;\n  }\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle() {\n    return this._doc.title;\n  }\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle) {\n    this._doc.title = newTitle || '';\n  }\n  static {\n    this.ɵfac = function Title_Factory(t) {\n      return new (t || Title)(i0.ɵɵinject(DOCUMENT));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: Title,\n      factory: function Title_Factory(t) {\n        let r = null;\n        if (t) {\n          r = new t();\n        } else {\n          r = createTitle();\n        }\n        return r;\n      },\n      providedIn: 'root'\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Title, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: createTitle,\n      deps: []\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nfunction exportNgVar(name, value) {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = ɵglobal['ng'] = ɵglobal['ng'] || {};\n    ng[name] = value;\n  }\n}\nconst win = typeof window !== 'undefined' && window || {};\nclass ChangeDetectionPerfRecord {\n  constructor(msPerTick, numTicks) {\n    this.msPerTick = msPerTick;\n    this.numTicks = numTicks;\n  }\n}\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nclass AngularProfiler {\n  constructor(ref) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config) {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    const isProfilerAvailable = win.console.profile != null;\n    if (record && isProfilerAvailable) {\n      win.console.profile(profileName);\n    }\n    const start = performanceNow();\n    let numTicks = 0;\n    while (numTicks < 5 || performanceNow() - start < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performanceNow();\n    if (record && isProfilerAvailable) {\n      win.console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    win.console.log(`ran ${numTicks} change detection cycles`);\n    win.console.log(`${msPerTick.toFixed(2)} ms per check`);\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\nfunction performanceNow() {\n  return win.performance && win.performance.now ? win.performance.now() : new Date().getTime();\n}\nconst PROFILER_GLOBAL_NAME = 'profiler';\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nfunction enableDebugTools(ref) {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nfunction disableDebugTools() {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nclass By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all() {\n    return () => true;\n  }\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector) {\n    return debugElement => {\n      return debugElement.nativeElement != null ? elementMatches(debugElement.nativeElement, selector) : false;\n    };\n  }\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type) {\n    return debugNode => debugNode.providerTokens.indexOf(type) !== -1;\n  }\n}\nfunction elementMatches(n, selector) {\n  if (ɵgetDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) || n.msMatchesSelector && n.msMatchesSelector(selector) || n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n  return false;\n}\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see {@link HammerGestureConfig}\n *\n * @ngModule HammerModule\n * @publicApi\n */\nconst HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nconst HAMMER_LOADER = new InjectionToken('HammerLoader');\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\nclass HammerGestureConfig {\n  constructor() {\n    /**\n     * A set of supported event names for gestures to be used in Angular.\n     * Angular supports all built-in recognizers, as listed in\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     */\n    this.events = [];\n    /**\n     * Maps gesture event names to a set of configuration options\n     * that specify overrides to the default values for specific properties.\n     *\n     * The key is a supported event name to be configured,\n     * and the options object contains a set of properties, with override values\n     * to be applied to the named recognizer event.\n     * For example, to disable recognition of the rotate event, specify\n     *  `{\"rotate\": {\"enable\": false}}`.\n     *\n     * Properties that are not present take the HammerJS default values.\n     * For information about which properties are supported for which events,\n     * and their allowed and default values, see\n     * [HammerJS documentation](https://hammerjs.github.io/).\n     *\n     */\n    this.overrides = {};\n  }\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element) {\n    const mc = new Hammer(element, this.options);\n    mc.get('pinch').set({\n      enable: true\n    });\n    mc.get('rotate').set({\n      enable: true\n    });\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n    return mc;\n  }\n  static {\n    this.ɵfac = function HammerGestureConfig_Factory(t) {\n      return new (t || HammerGestureConfig)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HammerGestureConfig,\n      factory: HammerGestureConfig.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HammerGestureConfig, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\nclass HammerGesturesPlugin extends EventManagerPlugin {\n  constructor(doc, _config, console, loader) {\n    super(doc);\n    this._config = _config;\n    this.console = console;\n    this.loader = loader;\n    this._loaderPromise = null;\n  }\n  supports(eventName) {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n    if (!window.Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        this.console.warn(`The \"${eventName}\" event cannot be bound because Hammer.JS is not ` + `loaded and no custom loader has been specified.`);\n      }\n      return false;\n    }\n    return true;\n  }\n  addEventListener(element, eventName, handler) {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!window.Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader());\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister = () => {\n        cancelRegistration = true;\n      };\n      zone.runOutsideAngular(() => this._loaderPromise.then(() => {\n        // If Hammer isn't actually loaded when the custom loader resolves, give up.\n        if (!window.Hammer) {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n          }\n          deregister = () => {};\n          return;\n        }\n        if (!cancelRegistration) {\n          // Now that Hammer is loaded and the listener is being loaded for real,\n          // the deregistration function changes from canceling registration to\n          // removal.\n          deregister = this.addEventListener(element, eventName, handler);\n        }\n      }).catch(() => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          this.console.warn(`The \"${eventName}\" event cannot be bound because the custom ` + `Hammer.JS loader failed.`);\n        }\n        deregister = () => {};\n      }));\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function (eventObj) {\n        zone.runGuarded(function () {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n  isCustomEvent(eventName) {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n  static {\n    this.ɵfac = function HammerGesturesPlugin_Factory(t) {\n      return new (t || HammerGesturesPlugin)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(HAMMER_GESTURE_CONFIG), i0.ɵɵinject(i0.ɵConsole), i0.ɵɵinject(HAMMER_LOADER, 8));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HammerGesturesPlugin,\n      factory: HammerGesturesPlugin.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HammerGesturesPlugin, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: HammerGestureConfig,\n      decorators: [{\n        type: Inject,\n        args: [HAMMER_GESTURE_CONFIG]\n      }]\n    }, {\n      type: i0.ɵConsole\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [HAMMER_LOADER]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\n *\n * @publicApi\n */\nclass HammerModule {\n  static {\n    this.ɵfac = function HammerModule_Factory(t) {\n      return new (t || HammerModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: HammerModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [{\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\n      }, {\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: HammerGestureConfig,\n        deps: []\n      }]\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HammerModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: EVENT_MANAGER_PLUGINS,\n        useClass: HammerGesturesPlugin,\n        multi: true,\n        deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, ɵConsole, [new Optional(), HAMMER_LOADER]]\n      }, {\n        provide: HAMMER_GESTURE_CONFIG,\n        useClass: HammerGestureConfig,\n        deps: []\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\nclass DomSanitizer {\n  static {\n    this.ɵfac = function DomSanitizer_Factory(t) {\n      return new (t || DomSanitizer)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DomSanitizer,\n      factory: function DomSanitizer_Factory(t) {\n        let r = null;\n        if (t) {\n          r = new (t || DomSanitizer)();\n        } else {\n          r = i0.ɵɵinject(DomSanitizerImpl);\n        }\n        return r;\n      },\n      providedIn: 'root'\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomSanitizer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useExisting: forwardRef(() => DomSanitizerImpl)\n    }]\n  }], null, null);\n})();\nfunction domSanitizerImplFactory(injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\nclass DomSanitizerImpl extends DomSanitizer {\n  constructor(_doc) {\n    super();\n    this._doc = _doc;\n  }\n  sanitize(ctx, value) {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value;\n      case SecurityContext.HTML:\n        if (ɵallowSanitizationBypassAndThrow(value, \"HTML\" /* BypassType.Html */)) {\n          return ɵunwrapSafeValue(value);\n        }\n        return ɵ_sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (ɵallowSanitizationBypassAndThrow(value, \"Style\" /* BypassType.Style */)) {\n          return ɵunwrapSafeValue(value);\n        }\n        return value;\n      case SecurityContext.SCRIPT:\n        if (ɵallowSanitizationBypassAndThrow(value, \"Script\" /* BypassType.Script */)) {\n          return ɵunwrapSafeValue(value);\n        }\n        throw new ɵRuntimeError(5200 /* RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (ɵallowSanitizationBypassAndThrow(value, \"URL\" /* BypassType.Url */)) {\n          return ɵunwrapSafeValue(value);\n        }\n        return ɵ_sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (ɵallowSanitizationBypassAndThrow(value, \"ResourceURL\" /* BypassType.ResourceUrl */)) {\n          return ɵunwrapSafeValue(value);\n        }\n        throw new ɵRuntimeError(5201 /* RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL */, (typeof ngDevMode === 'undefined' || ngDevMode) && `unsafe value used in a resource URL context (see ${ɵXSS_SECURITY_URL})`);\n      default:\n        throw new ɵRuntimeError(5202 /* RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Unexpected SecurityContext ${ctx} (see ${ɵXSS_SECURITY_URL})`);\n    }\n  }\n  bypassSecurityTrustHtml(value) {\n    return ɵbypassSanitizationTrustHtml(value);\n  }\n  bypassSecurityTrustStyle(value) {\n    return ɵbypassSanitizationTrustStyle(value);\n  }\n  bypassSecurityTrustScript(value) {\n    return ɵbypassSanitizationTrustScript(value);\n  }\n  bypassSecurityTrustUrl(value) {\n    return ɵbypassSanitizationTrustUrl(value);\n  }\n  bypassSecurityTrustResourceUrl(value) {\n    return ɵbypassSanitizationTrustResourceUrl(value);\n  }\n  static {\n    this.ɵfac = function DomSanitizerImpl_Factory(t) {\n      return new (t || DomSanitizerImpl)(i0.ɵɵinject(DOCUMENT));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DomSanitizerImpl,\n      factory: function DomSanitizerImpl_Factory(t) {\n        let r = null;\n        if (t) {\n          r = new t();\n        } else {\n          r = domSanitizerImplFactory(i0.ɵɵinject(Injector));\n        }\n        return r;\n      },\n      providedIn: 'root'\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DomSanitizerImpl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useFactory: domSanitizerImplFactory,\n      deps: [Injector]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature(kind, providers = []) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\n * Disables DOM nodes reuse during hydration. Effectively makes\n * Angular re-render an application from scratch on the client.\n *\n * When this option is enabled, make sure that the initial navigation\n * option is configured for the Router as `enabledBlocking` by using the\n * `withEnabledBlockingInitialNavigation` in the `provideRouter` call:\n *\n * ```\n * bootstrapApplication(RootComponent, {\n *   providers: [\n *     provideRouter(\n *       // ... other features ...\n *       withEnabledBlockingInitialNavigation()\n *     ),\n *     provideClientHydration(withNoDomReuse())\n *   ]\n * });\n * ```\n *\n * This would ensure that the application is rerendered after all async\n * operations in the Router (such as lazy-loading of components,\n * waiting for async guards and resolvers) are completed to avoid\n * clearing the DOM on the client too soon, thus causing content flicker.\n *\n * @see {@link provideRouter}\n * @see {@link withEnabledBlockingInitialNavigation}\n *\n * @publicApi\n * @developerPreview\n */\nfunction withNoDomReuse() {\n  // This feature has no providers and acts as a flag that turns off\n  // non-destructive hydration (which otherwise is turned on by default).\n  return hydrationFeature(0 /* HydrationFeatureKind.NoDomReuseFeature */);\n}\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n * @developerPreview\n */\nfunction withNoHttpTransferCache() {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(1 /* HydrationFeatureKind.NoHttpTransferCache */);\n}\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector() {\n  return [{\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      const ngZone = inject(NgZone);\n      // Checking `ngZone instanceof NgZone` would be insufficient here,\n      // because custom implementations might use NgZone as a base class.\n      if (ngZone.constructor !== NgZone) {\n        const console = inject(ɵConsole);\n        const message = ɵformatRuntimeError(-5000 /* RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE */, 'Angular detected that hydration was enabled for an application ' + 'that uses a custom or a noop Zone.js implementation. ' + 'This is not yet a fully supported configuration.');\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n      }\n    },\n    multi: true\n  }];\n}\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. You can enable/disable features by\n * passing special functions (from the `HydrationFeatures` set) as arguments to the\n * `provideClientHydration` function.\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see {@link withNoDomReuse}\n * @see {@link withNoHttpTransferCache}\n *\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi\n * @developerPreview\n */\nfunction provideClientHydration(...features) {\n  const providers = [];\n  const featuresKind = new Set();\n  for (const {\n    ɵproviders,\n    ɵkind\n  } of features) {\n    featuresKind.add(ɵkind);\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n  return makeEnvironmentProviders([typeof ngDevMode !== 'undefined' && ngDevMode ? provideZoneJsCompatibilityDetector() : [], featuresKind.has(0 /* HydrationFeatureKind.NoDomReuseFeature */) ? [] : ɵwithDomHydration(), featuresKind.has(1 /* HydrationFeatureKind.NoHttpTransferCache */) ? [] : ɵwithHttpTransferCache(), providers]);\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n/**\n * @publicApi\n */\nconst VERSION = new Version('16.1.3');\n\n// Re-export TransferState to the public API of the `platform-browser` for backwards-compatibility.\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n * @deprecated `makeStateKey` has moved, please import `makeStateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nconst makeStateKey = makeStateKey$1;\n// The below type is needed for G3 due to JSC_CONFORMANCE_VIOLATION.\nconst TransferState = TransferState$1;\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BrowserModule, By, DomSanitizer, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerModule, Meta, REMOVE_STYLES_ON_COMPONENT_DESTROY, Title, TransferState, VERSION, bootstrapApplication, createApplication, disableDebugTools, enableDebugTools, makeStateKey, platformBrowser, provideClientHydration, provideProtractorTestingSupport, withNoDomReuse, withNoHttpTransferCache, BrowserDomAdapter as ɵBrowserDomAdapter, BrowserGetTestability as ɵBrowserGetTestability, DomEventsPlugin as ɵDomEventsPlugin, DomRendererFactory2 as ɵDomRendererFactory2, DomSanitizerImpl as ɵDomSanitizerImpl, HammerGesturesPlugin as ɵHammerGesturesPlugin, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, KeyEventsPlugin as ɵKeyEventsPlugin, SharedStylesHost as ɵSharedStylesHost, initDomAdapter as ɵinitDomAdapter };","map":{"version":3,"names":["GenericBrowserDomAdapter","ɵDomAdapter","constructor","supportsDOMEvents","BrowserDomAdapter","makeCurrent","ɵsetRootDomAdapter","onAndCancel","el","evt","listener","addEventListener","removeEventListener","dispatchEvent","remove","node","parentNode","removeChild","createElement","tagName","doc","getDefaultDocument","createHtmlDocument","document","implementation","createHTMLDocument","isElementNode","nodeType","Node","ELEMENT_NODE","isShadowRoot","DocumentFragment","getGlobalEventTarget","target","window","body","getBaseHref","href","getBaseElementHref","relativePath","resetBaseElement","baseElement","getUserAgent","navigator","userAgent","getCookie","name","ɵparseCookieValue","cookie","querySelector","getAttribute","urlParsingNode","url","setAttribute","pathName","pathname","charAt","BrowserGetTestability","addToWindow","registry","ɵglobal","elem","findInAncestors","testability","findTestabilityInTree","ɵRuntimeError","ngDevMode","getAllTestabilities","getAllRootElements","whenAllStable","callback","testabilities","count","length","didWork","decrement","didWork_","forEach","whenStable","push","t","getTestability","ɵgetDOM","host","parentElement","BrowserXhr","build","XMLHttpRequest","Injectable","EVENT_MANAGER_PLUGINS","InjectionToken","EventManager","plugins","_zone","_eventNameToPlugin","Map","plugin","manager","_plugins","slice","reverse","element","eventName","handler","_findPluginFor","getZone","get","find","supports","set","ɵfac","EventManager_Factory","i0","NgZone","factory","Inject","EventManagerPlugin","_doc","APP_ID_ATTRIBUTE_NAME","SharedStylesHost","appId","nonce","platformId","styleRef","hostNodes","Set","styleNodesInDOM","collectServerRenderedStyles","platformIsServer","isPlatformServer","resetHostNodes","addStyles","styles","style","usageCount","changeUsageCount","onStyleAdded","removeStyles","onStyleRemoved","ngOnDestroy","clear","getAllStyles","addHost","hostNode","add","addStyleToHost","removeHost","delete","keys","elements","head","querySelectorAll","styleMap","textContent","delta","map","has","styleRefValue","usage","getStyleElement","styleEl","removeAttribute","appendChild","styleElRef","SharedStylesHost_Factory","DOCUMENT","APP_ID","CSP_NONCE","PLATFORM_ID","Optional","NAMESPACE_URIS","COMPONENT_REGEX","COMPONENT_VARIABLE","HOST_ATTR","CONTENT_ATTR","REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT","REMOVE_STYLES_ON_COMPONENT_DESTROY","providedIn","shimContentAttribute","componentShortId","replace","shimHostAttribute","shimStylesContent","compId","s","DomRendererFactory2","eventManager","sharedStylesHost","removeStylesOnCompDestroy","ngZone","rendererByCompId","defaultRenderer","DefaultDomRenderer2","createRenderer","type","encapsulation","ViewEncapsulation","ShadowDom","Emulated","renderer","getOrCreateRenderer","EmulatedEncapsulationDomRenderer2","applyToHost","NoneEncapsulationDomRenderer","applyStyles","id","ShadowDomRenderer","onDestroy","data","Object","create","destroyNode","destroy","namespace","createElementNS","createComment","value","createText","createTextNode","parent","newChild","targetParent","isTemplateNode","content","insertBefore","refChild","oldChild","selectRootElement","selectorOrNode","preserveContent","nextSibling","namespaceUri","setAttributeNS","removeAttributeNS","addClass","classList","removeClass","setStyle","flags","RendererStyleFlags2","DashCase","Important","setProperty","removeStyle","removeProperty","checkNoSyntheticProp","setValue","nodeValue","listen","event","Error","decoratePreventDefault","eventHandler","allowDefaultBehavior","runGuarded","preventDefault","undefined","AT_CHARCODE","charCodeAt","nameKind","hostEl","component","shadowRoot","attachShadow","mode","nodeOrShadowRoot","rendererUsageCount","contentAttr","hostAttr","DomEventsPlugin","DomEventsPlugin_Factory","MODIFIER_KEYS","_keyMap","MODIFIER_KEY_GETTERS","altKey","ctrlKey","metaKey","shiftKey","KeyEventsPlugin","parseEventName","parsedEvent","outsideHandler","eventCallback","runOutsideAngular","parts","toLowerCase","split","domEventName","shift","key","_normalizeKey","pop","fullKey","codeIX","indexOf","splice","modifierName","index","result","matchEventFullKeyCode","fullKeyCode","keycode","code","modifierGetter","zone","keyName","KeyEventsPlugin_Factory","bootstrapApplication","rootComponent","options","ɵinternalCreateApplication","createProvidersConfig","createApplication","appProviders","BROWSER_MODULE_PROVIDERS","providers","platformProviders","INTERNAL_BROWSER_PLATFORM_PROVIDERS","provideProtractorTestingSupport","TESTABILITY_PROVIDERS","initDomAdapter","errorHandler","ErrorHandler","_document","ɵsetDocument","provide","useValue","ɵPLATFORM_BROWSER_ID","PLATFORM_INITIALIZER","multi","useFactory","deps","platformBrowser","createPlatformFactory","platformCore","BROWSER_MODULE_PROVIDERS_MARKER","ɵTESTABILITY_GETTER","useClass","ɵTESTABILITY","Testability","TestabilityRegistry","ɵINJECTOR_SCOPE","RendererFactory2","useExisting","XhrFactory","BrowserModule","providersAlreadyPresent","withServerTransition","params","ngModule","BrowserModule_Factory","imports","CommonModule","ApplicationModule","NgModule","args","exports","SkipSelf","createMeta","Meta","ɵɵinject","_dom","addTag","tag","forceCreation","_getOrCreateElement","addTags","tags","reduce","getTag","attrSelector","getTags","list","call","updateTag","selector","_parseSelector","meta","_setMetaElementAttributes","removeTag","removeTagElement","filter","_containsAttributes","getElementsByTagName","prop","_getMetaKeyMap","attr","every","META_KEYS_MAP","Meta_Factory","r","httpEquiv","createTitle","Title","getTitle","title","setTitle","newTitle","Title_Factory","exportNgVar","COMPILED","ng","win","ChangeDetectionPerfRecord","msPerTick","numTicks","AngularProfiler","ref","appRef","injector","ApplicationRef","timeChangeDetection","config","record","profileName","isProfilerAvailable","console","profile","start","performanceNow","tick","end","profileEnd","log","toFixed","performance","now","Date","getTime","PROFILER_GLOBAL_NAME","enableDebugTools","disableDebugTools","By","all","css","debugElement","nativeElement","elementMatches","directive","debugNode","providerTokens","n","matches","msMatchesSelector","webkitMatchesSelector","EVENT_NAMES","HAMMER_GESTURE_CONFIG","HAMMER_LOADER","HammerGestureConfig","events","overrides","buildHammer","mc","Hammer","enable","HammerGesturesPlugin","_config","loader","_loaderPromise","hasOwnProperty","isCustomEvent","warn","cancelRegistration","deregister","then","catch","eventObj","on","off","HammerGesturesPlugin_Factory","ɵConsole","HammerModule","ɵinj","DomSanitizer","DomSanitizer_Factory","DomSanitizerImpl","forwardRef","domSanitizerImplFactory","sanitize","ctx","SecurityContext","NONE","HTML","ɵallowSanitizationBypassAndThrow","ɵunwrapSafeValue","ɵ_sanitizeHtml","String","toString","STYLE","SCRIPT","URL","ɵ_sanitizeUrl","RESOURCE_URL","ɵXSS_SECURITY_URL","bypassSecurityTrustHtml","ɵbypassSanitizationTrustHtml","bypassSecurityTrustStyle","ɵbypassSanitizationTrustStyle","bypassSecurityTrustScript","ɵbypassSanitizationTrustScript","bypassSecurityTrustUrl","ɵbypassSanitizationTrustUrl","bypassSecurityTrustResourceUrl","ɵbypassSanitizationTrustResourceUrl","DomSanitizerImpl_Factory","ɵprov","Injector","hydrationFeature","kind","ɵkind","ɵproviders","withNoDomReuse","withNoHttpTransferCache","provideZoneJsCompatibilityDetector","ENVIRONMENT_INITIALIZER","inject","message","ɵformatRuntimeError","provideClientHydration","features","featuresKind","makeEnvironmentProviders","ɵwithDomHydration","ɵwithHttpTransferCache","VERSION","Version","makeStateKey","makeStateKey$1","TransferState","TransferState$1"],"sources":["D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser\\generic_browser_adapter.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser\\browser_adapter.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser\\testability.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser\\xhr.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\dom\\events\\event_manager.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\dom\\shared_styles_host.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\dom\\dom_renderer.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\dom\\events\\dom_events.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\dom\\events\\key_events.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser\\meta.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser\\title.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\dom\\util.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser\\tools\\browser.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser\\tools\\common_tools.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\browser\\tools\\tools.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\dom\\debug\\by.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\dom\\events\\hammer_gestures.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\security\\dom_sanitization_service.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\hydration.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\version.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\src\\platform-browser.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\public_api.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\index.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\platform-browser\\platform-browser.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵDomAdapter as DomAdapter} from '@angular/common';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  override readonly supportsDOMEvents: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵparseCookieValue as parseCookieValue, ɵsetRootDomAdapter as setRootDomAdapter} from '@angular/common';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  static makeCurrent() {\n    setRootDomAdapter(new BrowserDomAdapter());\n  }\n\n  override onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener);\n    return () => {\n      el.removeEventListener(evt, listener);\n    };\n  }\n  override dispatchEvent(el: Node, evt: any) {\n    el.dispatchEvent(evt);\n  }\n  override remove(node: Node): void {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n  }\n  override createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  override createHtmlDocument(): Document {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  override getDefaultDocument(): Document {\n    return document;\n  }\n\n  override isElementNode(node: Node): boolean {\n    return node.nodeType === Node.ELEMENT_NODE;\n  }\n\n  override isShadowRoot(node: any): boolean {\n    return node instanceof DocumentFragment;\n  }\n\n  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n  override getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  override getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  override resetBaseElement(): void {\n    baseElement = null;\n  }\n  override getUserAgent(): string {\n    return window.navigator.userAgent;\n  }\n  override getCookie(name: string): string|null {\n    return parseCookieValue(document.cookie, name);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  baseElement = baseElement || document.querySelector('base');\n  return baseElement ? baseElement.getAttribute('href') : null;\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: HTMLAnchorElement|undefined;\nfunction relativePath(url: any): string {\n  urlParsingNode = urlParsingNode || document.createElement('a');\n  urlParsingNode.setAttribute('href', url);\n  const pathName = urlParsingNode.pathname;\n  return pathName.charAt(0) === '/' ? pathName : `/${pathName}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {GetTestability, Testability, TestabilityRegistry, ɵglobal as global, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport class BrowserGetTestability implements GetTestability {\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new RuntimeError(\n            RuntimeErrorCode.TESTABILITY_NOT_FOUND,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: (didWork: boolean) => void) => {\n      const testabilities = global['getAllAngularTestabilities']() as Testability[];\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: boolean) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach((testability) => {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, (<any>elem).host, true);\n    }\n    return this.findTestabilityInTree(registry, elem.parentElement, true);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable} from '@angular/core';\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  build(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken, NgZone, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../../errors';\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach((plugin) => {\n      plugin.manager = this;\n    });\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone {\n    return this._zone;\n  }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    let plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    plugin = plugins.find((plugin) => plugin.supports(eventName));\n    if (!plugin) {\n      throw new RuntimeError(\n          RuntimeErrorCode.NO_PLUGIN_FOR_EVENT,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `No event manager plugin found for event ${eventName}`);\n    }\n\n    this._eventNameToPlugin.set(eventName, plugin);\n    return plugin;\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // Using non-null assertion because it's set by EventManager's constructor\n  manager!: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, OnDestroy, Optional, PLATFORM_ID} from '@angular/core';\n\n/** The style elements attribute name used to set value of `APP_ID` token. */\nconst APP_ID_ATTRIBUTE_NAME = 'ng-app-id';\n\n@Injectable()\nexport class SharedStylesHost implements OnDestroy {\n  // Maps all registered host nodes to a list of style nodes that have been added to the host node.\n  private readonly styleRef = new Map < string /** Style string */, {\n    elements: HTMLStyleElement[];\n    usage: number\n  }\n  > ();\n  private readonly hostNodes = new Set<Node>();\n  private readonly styleNodesInDOM: Map<string, HTMLStyleElement>|null;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(CSP_NONCE) @Optional() private nonce?: string|null,\n      @Inject(PLATFORM_ID) readonly platformId: object = {}) {\n    this.styleNodesInDOM = this.collectServerRenderedStyles();\n    this.platformIsServer = isPlatformServer(platformId);\n    this.resetHostNodes();\n  }\n\n  addStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, 1);\n\n      if (usageCount === 1) {\n        this.onStyleAdded(style);\n      }\n    }\n  }\n\n  removeStyles(styles: string[]): void {\n    for (const style of styles) {\n      const usageCount = this.changeUsageCount(style, -1);\n\n      if (usageCount <= 0) {\n        this.onStyleRemoved(style);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    if (styleNodesInDOM) {\n      styleNodesInDOM.forEach((node) => node.remove());\n      styleNodesInDOM.clear();\n    }\n\n    for (const style of this.getAllStyles()) {\n      this.onStyleRemoved(style);\n    }\n\n    this.resetHostNodes();\n  }\n\n  addHost(hostNode: Node): void {\n    this.hostNodes.add(hostNode);\n\n    for (const style of this.getAllStyles()) {\n      this.addStyleToHost(hostNode, style);\n    }\n  }\n\n  removeHost(hostNode: Node): void {\n    this.hostNodes.delete(hostNode);\n  }\n\n  private getAllStyles(): IterableIterator<string> {\n    return this.styleRef.keys();\n  }\n\n  private onStyleAdded(style: string): void {\n    for (const host of this.hostNodes) {\n      this.addStyleToHost(host, style);\n    }\n  }\n\n  private onStyleRemoved(style: string): void {\n    const styleRef = this.styleRef;\n    styleRef.get(style)?.elements?.forEach((node) => node.remove());\n    styleRef.delete(style);\n  }\n\n  private collectServerRenderedStyles(): Map<string, HTMLStyleElement>|null {\n    const styles = this.doc.head?.querySelectorAll<HTMLStyleElement>(\n        `style[${APP_ID_ATTRIBUTE_NAME}=\"${this.appId}\"]`);\n\n    if (styles?.length) {\n      const styleMap = new Map<string, HTMLStyleElement>();\n\n      styles.forEach((style) => {\n        if (style.textContent != null) {\n          styleMap.set(style.textContent, style);\n        }\n      });\n\n      return styleMap;\n    }\n\n    return null;\n  }\n\n  private changeUsageCount(style: string, delta: number): number {\n    const map = this.styleRef;\n    if (map.has(style)) {\n      const styleRefValue = map.get(style)!;\n      styleRefValue.usage += delta;\n\n      return styleRefValue.usage;\n    }\n\n    map.set(style, {usage: delta, elements: []});\n    return delta;\n  }\n\n  private getStyleElement(host: Node, style: string): HTMLStyleElement {\n    const styleNodesInDOM = this.styleNodesInDOM;\n    const styleEl = styleNodesInDOM?.get(style);\n    if (styleEl?.parentNode === host) {\n      // `styleNodesInDOM` cannot be undefined due to the above `styleNodesInDOM?.get`.\n      styleNodesInDOM!.delete(style);\n\n      styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);\n\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // This attribute is solely used for debugging purposes.\n        styleEl.setAttribute('ng-style-reused', '');\n      }\n\n      return styleEl;\n    } else {\n      const styleEl = this.doc.createElement('style');\n\n      if (this.nonce) {\n        styleEl.setAttribute('nonce', this.nonce);\n      }\n\n      styleEl.textContent = style;\n\n      if (this.platformIsServer) {\n        styleEl.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);\n      }\n\n      return styleEl;\n    }\n  }\n\n  private addStyleToHost(host: Node, style: string): void {\n    const styleEl = this.getStyleElement(host, style);\n\n    host.appendChild(styleEl);\n\n    const styleRef = this.styleRef;\n    const styleElRef = styleRef.get(style)?.elements;\n    if (styleElRef) {\n      styleElRef.push(styleEl);\n    } else {\n      styleRef.set(style, {elements: [styleEl], usage: 1});\n    }\n  }\n\n  private resetHostNodes(): void {\n    const hostNodes = this.hostNodes;\n    hostNodes.clear();\n    // Re-add the head element back since this is the default host.\n    hostNodes.add(this.doc.head);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, isPlatformServer, ɵgetDOM as getDOM} from '@angular/common';\nimport {APP_ID, CSP_NONCE, Inject, Injectable, InjectionToken, NgZone, OnDestroy, PLATFORM_ID, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation, ɵRuntimeError as RuntimeError} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nimport {EventManager} from './events/event_manager';\nimport {SharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n  'math': 'http://www.w3.org/1998/MathML/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\n\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\n/**\n * The default value for the `REMOVE_STYLES_ON_COMPONENT_DESTROY` DI token.\n */\nconst REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = false;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates whether styles\n * of destroyed components should be removed from DOM.\n *\n * By default, the value is set to `false`. This will be changed in the next major version.\n * @publicApi\n */\nexport const REMOVE_STYLES_ON_COMPONENT_DESTROY =\n    new InjectionToken<boolean>('RemoveStylesOnCompDestroy', {\n      providedIn: 'root',\n      factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT,\n    });\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimStylesContent(compId: string, styles: string[]): string[] {\n  return styles.map(s => s.replace(COMPONENT_REGEX, compId));\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2, OnDestroy {\n  private readonly rendererByCompId =\n      new Map<string, EmulatedEncapsulationDomRenderer2|NoneEncapsulationDomRenderer>();\n  private readonly defaultRenderer: Renderer2;\n  private readonly platformIsServer: boolean;\n\n  constructor(\n      private readonly eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      @Inject(APP_ID) private readonly appId: string,\n      @Inject(REMOVE_STYLES_ON_COMPONENT_DESTROY) private removeStylesOnCompDestroy: boolean,\n      @Inject(DOCUMENT) private readonly doc: Document,\n      @Inject(PLATFORM_ID) readonly platformId: Object,\n      readonly ngZone: NgZone,\n      @Inject(CSP_NONCE) private readonly nonce: string|null = null,\n  ) {\n    this.platformIsServer = isPlatformServer(platformId);\n    this.defaultRenderer =\n        new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n\n    if (this.platformIsServer && type.encapsulation === ViewEncapsulation.ShadowDom) {\n      // Domino does not support shadow DOM.\n      type = {...type, encapsulation: ViewEncapsulation.Emulated};\n    }\n\n    const renderer = this.getOrCreateRenderer(element, type);\n    // Renderers have different logic due to different encapsulation behaviours.\n    // Ex: for emulated, an attribute is added to the element.\n    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {\n      renderer.applyToHost(element);\n    } else if (renderer instanceof NoneEncapsulationDomRenderer) {\n      renderer.applyStyles();\n    }\n\n    return renderer;\n  }\n\n  private getOrCreateRenderer(element: any, type: RendererType2): Renderer2 {\n    const rendererByCompId = this.rendererByCompId;\n    let renderer = rendererByCompId.get(type.id);\n\n    if (!renderer) {\n      const doc = this.doc;\n      const ngZone = this.ngZone;\n      const eventManager = this.eventManager;\n      const sharedStylesHost = this.sharedStylesHost;\n      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;\n      const platformIsServer = this.platformIsServer;\n\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n          renderer = new EmulatedEncapsulationDomRenderer2(\n              eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc,\n              ngZone, platformIsServer);\n          break;\n        case ViewEncapsulation.ShadowDom:\n          return new ShadowDomRenderer(\n              eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce,\n              platformIsServer);\n        default:\n          renderer = new NoneEncapsulationDomRenderer(\n              eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone,\n              platformIsServer);\n          break;\n      }\n\n      renderer.onDestroy = () => rendererByCompId.delete(type.id);\n      rendererByCompId.set(type.id, renderer);\n    }\n\n    return renderer;\n  }\n\n  ngOnDestroy() {\n    this.rendererByCompId.clear();\n  }\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  constructor(\n      private readonly eventManager: EventManager, private readonly doc: Document,\n      private readonly ngZone: NgZone, private readonly platformIsServer: boolean) {}\n\n  destroy(): void {}\n\n  destroyNode = null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      // TODO: `|| namespace` was added in\n      // https://github.com/angular/angular/commit/2b9cc8503d48173492c29f5a271b61126104fbdb to\n      // support how Ivy passed around the namespace URI rather than short name at the time. It did\n      // not, however extend the support to other parts of the system (setAttribute, setAttribute,\n      // and the ServerRenderer). We should decide what exactly the semantics for dealing with\n      // namespaces should be and make it consistent.\n      // Related issues:\n      // https://github.com/angular/angular/issues/44028\n      // https://github.com/angular/angular/issues/44883\n      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);\n    }\n\n    return this.doc.createElement(name);\n  }\n\n  createComment(value: string): any {\n    return this.doc.createComment(value);\n  }\n\n  createText(value: string): any {\n    return this.doc.createTextNode(value);\n  }\n\n  appendChild(parent: any, newChild: any): void {\n    const targetParent = isTemplateNode(parent) ? parent.content : parent;\n    targetParent.appendChild(newChild);\n  }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      const targetParent = isTemplateNode(parent) ? parent.content : parent;\n      targetParent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? this.doc.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new RuntimeError(\n          RuntimeErrorCode.ROOT_NODE_NOT_FOUND,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any {\n    return node.parentNode;\n  }\n\n  nextSibling(node: any): any {\n    return node.nextSibling;\n  }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = namespace + ':' + name;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void {\n    el.classList.add(name);\n  }\n\n  removeClass(el: any, name: string): void {\n    el.classList.remove(name);\n  }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {\n      el.style.setProperty(style, value, flags & RendererStyleFlags2.Important ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      // removeProperty has no effect when used on camelCased properties.\n      el.style.removeProperty(style);\n    } else {\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void {\n    node.nodeValue = value;\n  }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    (typeof ngDevMode === 'undefined' || ngDevMode) && checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      target = getDOM().getGlobalEventTarget(this.doc, target);\n      if (!target) {\n        throw new Error(`Unsupported event target ${target} for event ${event}`);\n      }\n    }\n\n    return this.eventManager.addEventListener(\n               target, event, this.decoratePreventDefault(callback)) as VoidFunction;\n  }\n\n  private decoratePreventDefault(eventHandler: Function): Function {\n    // `DebugNode.triggerEventHandler` needs to know if the listener was created with\n    // decoratePreventDefault or is a listener added outside the Angular context so it can handle\n    // the two differently. In the first case, the special '__ngUnwrap__' token is passed to the\n    // unwrap the listener (see below).\n    return (event: any) => {\n      // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function\n      // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The\n      // debug_node can inspect the listener toString contents for the existence of this special\n      // token. Because the token is a string literal, it is ensured to not be modified by compiled\n      // code.\n      if (event === '__ngUnwrap__') {\n        return eventHandler;\n      }\n\n      // Run the event handler inside the ngZone because event handlers are not patched\n      // by Zone on the server. This is required only for tests.\n      const allowDefaultBehavior = this.platformIsServer ?\n          this.ngZone.runGuarded(() => eventHandler(event)) :\n          eventHandler(event);\n      if (allowDefaultBehavior === false) {\n        event.preventDefault();\n      }\n\n      return undefined;\n    };\n  }\n}\n\nconst AT_CHARCODE = (() => '@'.charCodeAt(0))();\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new RuntimeError(\n        RuntimeErrorCode.UNEXPECTED_SYNTHETIC_PROPERTY,\n        `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:\n  - Either \\`BrowserAnimationsModule\\` or \\`NoopAnimationsModule\\` are imported in your application.\n  - There is corresponding configuration for the animation named \\`${\n            name}\\` defined in the \\`animations\\` field of the \\`@Component\\` decorator (see https://angular.io/api/core/Component#animations).`);\n  }\n}\n\n\nfunction isTemplateNode(node: any): node is HTMLTemplateElement {\n  return node.tagName === 'TEMPLATE' && node.content !== undefined;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager,\n      private sharedStylesHost: SharedStylesHost,\n      private hostEl: any,\n      component: RendererType2,\n      doc: Document,\n      ngZone: NgZone,\n      nonce: string|null,\n      platformIsServer: boolean,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = shimStylesContent(component.id, component.styles);\n\n    for (const style of styles) {\n      const styleEl = document.createElement('style');\n\n      if (nonce) {\n        styleEl.setAttribute('nonce', nonce);\n      }\n\n      styleEl.textContent = style;\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any {\n    return node === this.hostEl ? this.shadowRoot : node;\n  }\n\n  override appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  override insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  override removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  override parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n\n  override destroy() {\n    this.sharedStylesHost.removeHost(this.shadowRoot);\n  }\n}\n\nclass NoneEncapsulationDomRenderer extends DefaultDomRenderer2 {\n  private readonly styles: string[];\n  private rendererUsageCount = 0;\n  onDestroy: VoidFunction|undefined;\n\n  constructor(\n      eventManager: EventManager,\n      private readonly sharedStylesHost: SharedStylesHost,\n      component: RendererType2,\n      private removeStylesOnCompDestroy: boolean,\n      doc: Document,\n      ngZone: NgZone,\n      platformIsServer: boolean,\n      compId?: string,\n  ) {\n    super(eventManager, doc, ngZone, platformIsServer);\n    this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;\n  }\n\n  applyStyles(): void {\n    this.sharedStylesHost.addStyles(this.styles);\n    this.rendererUsageCount++;\n  }\n\n  override destroy(): void {\n    if (!this.removeStylesOnCompDestroy) {\n      return;\n    }\n\n    this.sharedStylesHost.removeStyles(this.styles);\n    this.rendererUsageCount--;\n    if (this.rendererUsageCount === 0) {\n      this.onDestroy?.();\n    }\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends NoneEncapsulationDomRenderer {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: SharedStylesHost, component: RendererType2,\n      appId: string, removeStylesOnCompDestroy: boolean, doc: Document, ngZone: NgZone,\n      platformIsServer: boolean) {\n    const compId = appId + '-' + component.id;\n    super(\n        eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone,\n        platformIsServer, compId);\n    this.contentAttr = shimContentAttribute(compId);\n    this.hostAttr = shimHostAttribute(compId);\n  }\n\n  applyToHost(element: any): void {\n    this.applyStyles();\n    this.setAttribute(element, this.hostAttr, '');\n  }\n\n  override createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  override supports(eventName: string): boolean {\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, handler as EventListener, false);\n    return () => this.removeEventListener(element, eventName, handler as EventListener);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    return target.removeEventListener(eventName, callback as EventListener);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n// The following values are here for cross-browser compatibility and to match the W3C standard\n// cf https://www.w3.org/TR/DOM-Level-3-Events-key/\nconst _keyMap: {[k: string]: string} = {\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) {\n    super(doc);\n  }\n\n  /**\n   * Reports whether a named key event is supported.\n   * @param eventName The event name to query.\n   * @return True if the named key event is supported.\n   */\n  override supports(eventName: string): boolean {\n    return KeyEventsPlugin.parseEventName(eventName) != null;\n  }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n   */\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName)!;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  /**\n   * Parses the user provided full keyboard event definition and normalizes it for\n   * later internal use. It ensures the string is all lowercase, converts special\n   * characters to a standard spelling, and orders all the values consistently.\n   *\n   * @param eventName The name of the key event to listen for.\n   * @returns an object with the full, normalized string, and the dom event name\n   * or null in the case when the event doesn't match a keyboard event.\n   */\n  static parseEventName(eventName: string): {fullKey: string, domEventName: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop()!);\n\n    let fullKey = '';\n    let codeIX = parts.indexOf('code');\n    if (codeIX > -1) {\n      parts.splice(codeIX, 1);\n      fullKey = 'code.';\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    // NOTE: Please don't rewrite this as so, as it will break JSCompiler property renaming.\n    //       The code must remain in the `result['domEventName']` form.\n    // return {domEventName, fullKey};\n    const result: {fullKey: string, domEventName: string} = {} as any;\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  /**\n   * Determines whether the actual keys pressed match the configured key code string.\n   * The `fullKeyCode` event is normalized in the `parseEventName` method when the\n   * event is attached to the DOM during the `addEventListener` call. This is unseen\n   * by the end user and is normalized for internal consistency and parsing.\n   *\n   * @param event The keyboard event.\n   * @param fullKeyCode The normalized user defined expected key event string\n   * @returns boolean.\n   */\n  static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean {\n    let keycode = _keyMap[event.key] || event.key;\n    let key = '';\n    if (fullKeyCode.indexOf('code.') > -1) {\n      keycode = event.code;\n      key = 'code.';\n    }\n    // the keycode could be unidentified so we have to check here\n    if (keycode == null || !keycode) return false;\n    keycode = keycode.toLowerCase();\n    if (keycode === ' ') {\n      keycode = 'space';  // for readability\n    } else if (keycode === '.') {\n      keycode = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName !== keycode) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          key += modifierName + '.';\n        }\n      }\n    });\n    key += keycode;\n    return key === fullKeyCode;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function {\n    return (event: KeyboardEvent) => {\n      if (KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, DOCUMENT, XhrFactory, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationConfig as ApplicationConfigFromCore, ApplicationModule, ApplicationRef, createPlatformFactory, ErrorHandler, Inject, InjectionToken, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, platformCore, PlatformRef, Provider, RendererFactory2, SkipSelf, StaticProvider, Testability, TestabilityRegistry, Type, ɵINJECTOR_SCOPE as INJECTOR_SCOPE, ɵinternalCreateApplication as internalCreateApplication, ɵRuntimeError as RuntimeError, ɵsetDocument, ɵTESTABILITY as TESTABILITY, ɵTESTABILITY_GETTER as TESTABILITY_GETTER} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserGetTestability} from './browser/testability';\nimport {BrowserXhr} from './browser/xhr';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {SharedStylesHost} from './dom/shared_styles_host';\nimport {RuntimeErrorCode} from './errors';\n\n\n/**\n * Set of config options available during the application bootstrap operation.\n *\n * @publicApi\n *\n * @deprecated\n * `ApplicationConfig` has moved, please import `ApplicationConfig` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\ntype ApplicationConfig = ApplicationConfigFromCore;\nexport {ApplicationConfig};\n\n/**\n * Bootstraps an instance of an Angular application and renders a standalone component as the\n * application's root component. More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The root component passed into this function *must* be a standalone one (should have the\n * `standalone: true` flag in the `@Component` decorator config).\n *\n * ```typescript\n * @Component({\n *   standalone: true,\n *   template: 'Hello world!'\n * })\n * class RootComponent {}\n *\n * const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n * ```\n *\n * You can add the list of providers that should be available in the application injector by\n * specifying the `providers` field in an object passed as the second argument:\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n *   ]\n * });\n * ```\n *\n * The `importProvidersFrom` helper method can be used to collect all providers from any\n * existing NgModule (and transitively from all NgModules that it imports):\n *\n * ```typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(SomeNgModule)\n *   ]\n * });\n * ```\n *\n * Note: the `bootstrapApplication` method doesn't include [Testability](api/core/Testability) by\n * default. You can add [Testability](api/core/Testability) by getting the list of necessary\n * providers using `provideProtractorTestingSupport()` function and adding them into the `providers`\n * array, for example:\n *\n * ```typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n * ```\n *\n * @param rootComponent A reference to a standalone component that should be rendered.\n * @param options Extra configuration for the bootstrap operation, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function bootstrapApplication(\n    rootComponent: Type<unknown>, options?: ApplicationConfig): Promise<ApplicationRef> {\n  return internalCreateApplication({rootComponent, ...createProvidersConfig(options)});\n}\n\n/**\n * Create an instance of an Angular application without bootstrapping any components. This is useful\n * for the situation where one wants to decouple application environment creation (a platform and\n * associated injectors) from rendering components on a screen. Components can be subsequently\n * bootstrapped on the returned `ApplicationRef`.\n *\n * @param options Extra configuration for the application environment, see `ApplicationConfig` for\n *     additional info.\n * @returns A promise that returns an `ApplicationRef` instance once resolved.\n *\n * @publicApi\n */\nexport function createApplication(options?: ApplicationConfig) {\n  return internalCreateApplication(createProvidersConfig(options));\n}\n\nfunction createProvidersConfig(options?: ApplicationConfig) {\n  return {\n    appProviders: [\n      ...BROWSER_MODULE_PROVIDERS,\n      ...(options?.providers ?? []),\n    ],\n    platformProviders: INTERNAL_BROWSER_PLATFORM_PROVIDERS\n  };\n}\n\n/**\n * Returns a set of providers required to setup [Testability](api/core/Testability) for an\n * application bootstrapped using the `bootstrapApplication` function. The set of providers is\n * needed to support testing an application with Protractor (which relies on the Testability APIs\n * to be present).\n *\n * @returns An array of providers required to setup Testability for an application and make it\n *     available for testing using Protractor.\n *\n * @publicApi\n */\nexport function provideProtractorTestingSupport(): Provider[] {\n  // Return a copy to prevent changes to the original array in case any in-place\n  // alterations are performed to the `provideProtractorTestingSupport` call results in app\n  // code.\n  return [...TESTABILITY_PROVIDERS];\n}\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  // Tell ivy about the global document\n  ɵsetDocument(document);\n  return document;\n}\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * A factory function that returns a `PlatformRef` instance associated with browser service\n * providers.\n *\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\n/**\n * Internal marker to signal whether providers from the `BrowserModule` are already present in DI.\n * This is needed to avoid loading `BrowserModule` providers twice. We can't rely on the\n * `BrowserModule` presence itself, since the standalone-based bootstrap just imports\n * `BrowserModule` providers without referencing the module itself.\n */\nconst BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(\n    (typeof ngDevMode === 'undefined' || ngDevMode) ? 'BrowserModule Providers Marker' : '');\n\nconst TESTABILITY_PROVIDERS = [\n  {\n    provide: TESTABILITY_GETTER,\n    useClass: BrowserGetTestability,\n    deps: [],\n  },\n  {\n    provide: TESTABILITY,\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  },\n  {\n    provide: Testability,  // Also provide as `Testability` for backwards-compatibility.\n    useClass: Testability,\n    deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]\n  }\n];\n\nconst BROWSER_MODULE_PROVIDERS: Provider[] = [\n  {provide: INJECTOR_SCOPE, useValue: 'root'},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []}, {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  DomRendererFactory2, SharedStylesHost, EventManager,\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: XhrFactory, useClass: BrowserXhr, deps: []},\n  (typeof ngDevMode === 'undefined' || ngDevMode) ?\n      {provide: BROWSER_MODULE_PROVIDERS_MARKER, useValue: true} :\n      []\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by default in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],\n  exports: [CommonModule, ApplicationModule],\n})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BROWSER_MODULE_PROVIDERS_MARKER)\n              providersAlreadyPresent: boolean|null) {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && providersAlreadyPresent) {\n      throw new RuntimeError(\n          RuntimeErrorCode.BROWER_MODULE_ALREADY_LOADED,\n          `Providers from the \\`BrowserModule\\` have already been loaded. If you need access ` +\n              `to common directives such as NgIf and NgFor, import the \\`CommonModule\\` instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   *\n   * @deprecated Use {@link APP_ID} instead to set the application ID.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵDomAdapter as DomAdapter, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n/**\n * Represents the attributes of an HTML `<meta>` element. The element itself is\n * represented by the internal `HTMLMetaElement`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see {@link Meta}\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string;\n  content?: string;\n  httpEquiv?: string;\n  id?: string;\n  itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n}&{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create a `Meta` service instance for the current DOM document.\n */\nexport function createMeta() {\n  return new Meta(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service for managing HTML `<meta>` tags.\n *\n * Properties of the `MetaDefinition` object match the attributes of the\n * HTML `<meta>` tag. These tags define document metadata that is important for\n * things like configuring a Content Security Policy, defining browser compatibility\n * and security settings, setting HTTP Headers, defining rich content for social sharing,\n * and Search Engine Optimization (SEO).\n *\n * To identify specific `<meta>` tags in a document, use an attribute selection\n * string in the format `\"tag_attribute='value string'\"`.\n * For example, an `attrSelector` value of `\"name='description'\"` matches a tag\n * whose `name` attribute has the value `\"description\"`.\n * Selectors are used with the `querySelector()` Document method,\n * in the format `meta[{attrSelector}]`.\n *\n * @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n * @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n *\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    this._dom = getDOM();\n  }\n  /**\n   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * If an existing element is found, it is returned and is not modified in any way.\n   * @param tag The definition of a `<meta>` element to match or create.\n   * @param forceCreation True to create a new element without checking whether one already exists.\n   * @returns The existing element with the same attributes and values if found,\n   * the new element if no match is found, or `null` if the tag parameter is not defined.\n   */\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  /**\n   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.\n   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute\n   * values in the provided tag definition, and verifies that all other attribute values are equal.\n   * @param tags An array of tag definitions to match or create.\n   * @param forceCreation True to create new elements without checking whether they already exist.\n   * @returns The matching elements if found, or the new elements.\n   */\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  /**\n   * Retrieves a `<meta>` tag element in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching element, if any.\n   */\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._doc.querySelector(`meta[${attrSelector}]`) || null;\n  }\n\n  /**\n   * Retrieves a set of `<meta>` tag elements in the current HTML document.\n   * @param attrSelector The tag attribute and value to match against, in the format\n   * `\"tag_attribute='value string'\"`.\n   * @returns The matching elements, if any.\n   */\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  /**\n   * Modifies an existing `<meta>` tag element in the current HTML document.\n   * @param tag The tag description with which to replace the existing tag content.\n   * @param selector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   * If not supplied, matches a tag with the same `name` or `property` attribute value as the\n   * replacement tag.\n   * @return The modified element.\n   */\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector)!;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param attrSelector A tag attribute and value to match against, to identify\n   * an existing tag. A string in the format `\"tag_attribute=`value string`\"`.\n   */\n  removeTag(attrSelector: string): void {\n    this.removeTagElement(this.getTag(attrSelector)!);\n  }\n\n  /**\n   * Removes an existing `<meta>` tag element from the current HTML document.\n   * @param meta The tag definition to match against to identify an existing tag.\n   */\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      const elem = this.getTags(selector).filter(elem => this._containsAttributes(meta, elem))[0];\n      if (elem !== undefined) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._doc.getElementsByTagName('head')[0];\n    head.appendChild(element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach(\n        (prop: string) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every(\n        (key: string) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);\n  }\n\n  private _getMetaKeyMap(prop: string): string {\n    return META_KEYS_MAP[prop] || prop;\n  }\n}\n\n/**\n * Mapping for MetaDefinition properties with their correct meta attribute names\n */\nconst META_KEYS_MAP: {[prop: string]: string;} = {\n  httpEquiv: 'http-equiv'\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵgetDOM as getDOM} from '@angular/common';\nimport {Inject, Injectable, ɵɵinject} from '@angular/core';\n\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(ɵɵinject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string {\n    return this._doc.title;\n  }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) {\n    this._doc.title = newTitle || '';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵglobal as global} from '@angular/core';\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as {[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\n\nimport {window} from './browser';\n\nexport class ChangeDetectionPerfRecord {\n  constructor(public msPerTick: number, public numTicks: number) {}\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n\n  constructor(ref: ComponentRef<any>) {\n    this.appRef = ref.injector.get(ApplicationRef);\n  }\n\n  // tslint:disable:no-console\n  /**\n   * Exercises change detection in a loop and then prints the average amount of\n   * time in milliseconds how long a single round of change detection takes for\n   * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n   * of 500 milliseconds.\n   *\n   * Optionally, a user may pass a `config` parameter containing a map of\n   * options. Supported options are:\n   *\n   * `record` (boolean) - causes the profiler to record a CPU profile while\n   * it exercises the change detector. Example:\n   *\n   * ```\n   * ng.profiler.timeChangeDetection({record: true})\n   * ```\n   */\n  timeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const record = config && config['record'];\n    const profileName = 'Change Detection';\n    // Profiler is not available in Android browsers without dev tools opened\n    const isProfilerAvailable = window.console.profile != null;\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const start = performanceNow();\n    let numTicks = 0;\n    while (numTicks < 5 || (performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const end = performanceNow();\n    if (record && isProfilerAvailable) {\n      window.console.profileEnd(profileName);\n    }\n    const msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\nfunction performanceNow() {\n  return window.performance && window.performance.now ? window.performance.now() :\n                                                        new Date().getTime();\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentRef} from '@angular/core';\nimport {exportNgVar} from '../../dom/util';\nimport {AngularProfiler} from './common_tools';\n\nconst PROFILER_GLOBAL_NAME = 'profiler';\n\n/**\n * Enabled Angular debug tools that are accessible via your browser's\n * developer console.\n *\n * Usage:\n *\n * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n * 1. Type `ng.` (usually the console will show auto-complete suggestion)\n * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`\n *    then hit Enter.\n *\n * @publicApi\n */\nexport function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T> {\n  exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));\n  return ref;\n}\n\n/**\n * Disables Angular tools.\n *\n * @publicApi\n */\nexport function disableDebugTools(): void {\n  exportNgVar(PROFILER_GLOBAL_NAME, null);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵgetDOM as getDOM} from '@angular/common';\nimport {DebugElement, DebugNode, Predicate, Type} from '@angular/core';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all nodes.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugNode> {\n    return () => true;\n  }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match nodes that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugNode> {\n    return (debugNode) => debugNode.providerTokens!.indexOf(type) !== -1;\n  }\n}\n\nfunction elementMatches(n: any, selector: string): boolean {\n  if (getDOM().isElementNode(n)) {\n    return n.matches && n.matches(selector) ||\n        n.msMatchesSelector && n.msMatchesSelector(selector) ||\n        n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n  }\n\n  return false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, NgModule, Optional, Provider, ɵConsole as Console} from '@angular/core';\n\nimport {EVENT_MANAGER_PLUGINS, EventManagerPlugin} from './event_manager';\n\n\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n  'doubletap': true\n};\n\n/**\n * DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n * @see {@link HammerGestureConfig}\n *\n * @ngModule HammerModule\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n   * Maps gesture event names to a set of configuration options\n   * that specify overrides to the default values for specific properties.\n   *\n   * The key is a supported event name to be configured,\n   * and the options object contains a set of properties, with override values\n   * to be applied to the named recognizer event.\n   * For example, to disable recognition of the rotate event, specify\n   *  `{\"rotate\": {\"enable\": false}}`.\n   *\n   * Properties that are not present take the HammerJS default values.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   *\n   */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](https://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any;\n    domEvents?: boolean;\n    enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer!(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n/**\n * Event plugin that adds Hammer support to an application.\n *\n * @ngModule HammerModule\n */\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  private _loaderPromise: Promise<void>|null = null;\n\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  override supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        this.console.warn(\n            `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n            `loaded and no custom loader has been specified.`);\n      }\n      return false;\n    }\n\n    return true;\n  }\n\n  override addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader!());\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => {\n        cancelRegistration = true;\n      };\n\n      zone.runOutsideAngular(\n          () => this._loaderPromise!\n                    .then(() => {\n                      // If Hammer isn't actually loaded when the custom loader resolves, give up.\n                      if (!(window as any).Hammer) {\n                        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                          this.console.warn(\n                              `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n                        }\n                        deregister = () => {};\n                        return;\n                      }\n\n                      if (!cancelRegistration) {\n                        // Now that Hammer is loaded and the listener is being loaded for real,\n                        // the deregistration function changes from canceling registration to\n                        // removal.\n                        deregister = this.addEventListener(element, eventName, handler);\n                      }\n                    })\n                    .catch(() => {\n                      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                        this.console.warn(\n                            `The \"${eventName}\" event cannot be bound because the custom ` +\n                            `Hammer.JS loader failed.`);\n                      }\n                      deregister = () => {};\n                    }));\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => {\n        deregister();\n      };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() {\n          handler(eventObj);\n        });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean {\n    return this._config.events.indexOf(eventName) > -1;\n  }\n}\n\n/**\n * Adds support for HammerJS.\n *\n * Import this module at the root of your application so that Angular can work with\n * HammerJS to detect gesture events.\n *\n * Note that applications still need to include the HammerJS script itself. This module\n * simply sets up the coordination layer between HammerJS and Angular's EventManager.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    {\n      provide: EVENT_MANAGER_PLUGINS,\n      useClass: HammerGesturesPlugin,\n      multi: true,\n      deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n    },\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  ]\n})\nexport class HammerModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {forwardRef, Inject, Injectable, Injector, Sanitizer, SecurityContext, ɵ_sanitizeHtml as _sanitizeHtml, ɵ_sanitizeUrl as _sanitizeUrl, ɵallowSanitizationBypassAndThrow as allowSanitizationBypassOrThrow, ɵbypassSanitizationTrustHtml as bypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl as bypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript as bypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle as bypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl as bypassSanitizationTrustUrl, ɵBypassType as BypassType, ɵRuntimeError as RuntimeError, ɵunwrapSafeValue as unwrapSafeValue, ɵXSS_SECURITY_URL as XSS_SECURITY_URL} from '@angular/core';\n\nimport {RuntimeErrorCode} from '../errors';\n\nexport {SecurityContext};\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useExisting: forwardRef(() => DomSanitizerImpl)})\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Gets a safe value from either a known safe value or a value with unknown safety.\n   *\n   * If the given value is already a `SafeValue`, this method returns the unwrapped value.\n   * If the security context is HTML and the given value is a plain string, this method\n   * sanitizes the string, removing any potentially unsafe content.\n   * For any other security context, this method throws an error if provided\n   * with a plain string.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\nexport function domSanitizerImplFactory(injector: Injector) {\n  return new DomSanitizerImpl(injector.get(DOCUMENT));\n}\n\n@Injectable({providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [Injector]})\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n  }\n\n  override sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Html)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeHtml(this._doc, String(value)).toString();\n      case SecurityContext.STYLE:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Style)) {\n          return unwrapSafeValue(value);\n        }\n        return value as string;\n      case SecurityContext.SCRIPT:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Script)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNSAFE_SCRIPT,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.Url)) {\n          return unwrapSafeValue(value);\n        }\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (allowSanitizationBypassOrThrow(value, BypassType.ResourceUrl)) {\n          return unwrapSafeValue(value);\n        }\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNSAFE_RESOURCE_URL,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);\n      default:\n        throw new RuntimeError(\n            RuntimeErrorCode.SANITIZATION_UNEXPECTED_CTX,\n            (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);\n    }\n  }\n\n  override bypassSecurityTrustHtml(value: string): SafeHtml {\n    return bypassSanitizationTrustHtml(value);\n  }\n  override bypassSecurityTrustStyle(value: string): SafeStyle {\n    return bypassSanitizationTrustStyle(value);\n  }\n  override bypassSecurityTrustScript(value: string): SafeScript {\n    return bypassSanitizationTrustScript(value);\n  }\n  override bypassSecurityTrustUrl(value: string): SafeUrl {\n    return bypassSanitizationTrustUrl(value);\n  }\n  override bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return bypassSanitizationTrustResourceUrl(value);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ɵwithHttpTransferCache as withHttpTransferCache} from '@angular/common/http';\nimport {ENVIRONMENT_INITIALIZER, EnvironmentProviders, inject, makeEnvironmentProviders, NgZone, Provider, ɵConsole as Console, ɵformatRuntimeError as formatRuntimeError, ɵwithDomHydration as withDomHydration} from '@angular/core';\n\nimport {RuntimeErrorCode} from './errors';\n\n/**\n * The list of features as an enum to uniquely type each `HydrationFeature`.\n * @see HydrationFeature\n *\n * @publicApi\n * @developerPreview\n */\nexport const enum HydrationFeatureKind {\n  NoDomReuseFeature,\n  NoHttpTransferCache\n}\n\n/**\n * Helper type to represent a Hydration feature.\n *\n * @publicApi\n * @developerPreview\n */\nexport interface HydrationFeature<FeatureKind extends HydrationFeatureKind> {\n  ɵkind: FeatureKind;\n  ɵproviders: Provider[];\n}\n\n/**\n * Helper function to create an object that represents a Hydration feature.\n */\nfunction hydrationFeature<FeatureKind extends HydrationFeatureKind>(\n    kind: FeatureKind, providers: Provider[] = []): HydrationFeature<FeatureKind> {\n  return {ɵkind: kind, ɵproviders: providers};\n}\n\n/**\n * Disables DOM nodes reuse during hydration. Effectively makes\n * Angular re-render an application from scratch on the client.\n *\n * When this option is enabled, make sure that the initial navigation\n * option is configured for the Router as `enabledBlocking` by using the\n * `withEnabledBlockingInitialNavigation` in the `provideRouter` call:\n *\n * ```\n * bootstrapApplication(RootComponent, {\n *   providers: [\n *     provideRouter(\n *       // ... other features ...\n *       withEnabledBlockingInitialNavigation()\n *     ),\n *     provideClientHydration(withNoDomReuse())\n *   ]\n * });\n * ```\n *\n * This would ensure that the application is rerendered after all async\n * operations in the Router (such as lazy-loading of components,\n * waiting for async guards and resolvers) are completed to avoid\n * clearing the DOM on the client too soon, thus causing content flicker.\n *\n * @see {@link provideRouter}\n * @see {@link withEnabledBlockingInitialNavigation}\n *\n * @publicApi\n * @developerPreview\n */\nexport function withNoDomReuse(): HydrationFeature<HydrationFeatureKind.NoDomReuseFeature> {\n  // This feature has no providers and acts as a flag that turns off\n  // non-destructive hydration (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoDomReuseFeature);\n}\n\n/**\n * Disables HTTP transfer cache. Effectively causes HTTP requests to be performed twice: once on the\n * server and other one on the browser.\n *\n * @publicApi\n * @developerPreview\n */\nexport function withNoHttpTransferCache():\n    HydrationFeature<HydrationFeatureKind.NoHttpTransferCache> {\n  // This feature has no providers and acts as a flag that turns off\n  // HTTP transfer cache (which otherwise is turned on by default).\n  return hydrationFeature(HydrationFeatureKind.NoHttpTransferCache);\n}\n\n/**\n * Returns an `ENVIRONMENT_INITIALIZER` token setup with a function\n * that verifies whether compatible ZoneJS was used in an application\n * and logs a warning in a console if it's not the case.\n */\nfunction provideZoneJsCompatibilityDetector(): Provider[] {\n  return [{\n    provide: ENVIRONMENT_INITIALIZER,\n    useValue: () => {\n      const ngZone = inject(NgZone);\n      // Checking `ngZone instanceof NgZone` would be insufficient here,\n      // because custom implementations might use NgZone as a base class.\n      if (ngZone.constructor !== NgZone) {\n        const console = inject(Console);\n        const message = formatRuntimeError(\n            RuntimeErrorCode.UNSUPPORTED_ZONEJS_INSTANCE,\n            'Angular detected that hydration was enabled for an application ' +\n                'that uses a custom or a noop Zone.js implementation. ' +\n                'This is not yet a fully supported configuration.');\n        // tslint:disable-next-line:no-console\n        console.warn(message);\n      }\n    },\n    multi: true,\n  }];\n}\n\n/**\n * Sets up providers necessary to enable hydration functionality for the application.\n * By default, the function enables the recommended set of features for the optimal\n * performance for most of the applications. You can enable/disable features by\n * passing special functions (from the `HydrationFeatures` set) as arguments to the\n * `provideClientHydration` function.\n *\n * @usageNotes\n *\n * Basic example of how you can enable hydration in your application when\n * `bootstrapApplication` function is used:\n * ```\n * bootstrapApplication(AppComponent, {\n *   providers: [provideClientHydration()]\n * });\n * ```\n *\n * Alternatively if you are using NgModules, you would add `provideClientHydration`\n * to your root app module's provider list.\n * ```\n * @NgModule({\n *   declarations: [RootCmp],\n *   bootstrap: [RootCmp],\n *   providers: [provideClientHydration()],\n * })\n * export class AppModule {}\n * ```\n *\n * @see {@link withNoDomReuse}\n * @see {@link withNoHttpTransferCache}\n *\n * @param features Optional features to configure additional router behaviors.\n * @returns A set of providers to enable hydration.\n *\n * @publicApi\n * @developerPreview\n */\nexport function provideClientHydration(...features: HydrationFeature<HydrationFeatureKind>[]):\n    EnvironmentProviders {\n  const providers: Provider[] = [];\n  const featuresKind = new Set<HydrationFeatureKind>();\n\n  for (const {ɵproviders, ɵkind} of features) {\n    featuresKind.add(ɵkind);\n\n    if (ɵproviders.length) {\n      providers.push(ɵproviders);\n    }\n  }\n\n  return makeEnvironmentProviders([\n    (typeof ngDevMode !== 'undefined' && ngDevMode) ? provideZoneJsCompatibilityDetector() : [],\n    (featuresKind.has(HydrationFeatureKind.NoDomReuseFeature) ? [] : withDomHydration()),\n    (featuresKind.has(HydrationFeatureKind.NoHttpTransferCache) ? [] : withHttpTransferCache()),\n    providers,\n  ]);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the platform-browser package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('16.1.3');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Re-export TransferState to the public API of the `platform-browser` for backwards-compatibility.\nimport {makeStateKey as makeStateKeyFromCore, StateKey as StateKeyFromCore, TransferState as TransferStateFromCore} from '@angular/core';\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n * @deprecated `makeStateKey` has moved, please import `makeStateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport const makeStateKey = makeStateKeyFromCore;\n\n/**\n *\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * The `TransferState` is available as an injectable token.\n * On the client, just inject this token using DI and use it, it will be lazily initialized.\n * On the server it's already included if `renderApplication` function is used. Otherwise, import\n * the `ServerTransferStateModule` module to make the `TransferState` available.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialized in a\n * non-lossy manner.\n *\n * @publicApi\n *\n * @deprecated `TransferState` has moved, please import `TransferState` from `@angular/core`\n *     instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type TransferState = TransferStateFromCore;\n// The below type is needed for G3 due to JSC_CONFORMANCE_VIOLATION.\nexport const TransferState: {new (): TransferStateFromCore} = TransferStateFromCore;\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n * @publicApi\n *\n * @deprecated `StateKey` has moved, please import `StateKey` from `@angular/core` instead.\n */\n// The below is a workaround to add a deprecated message.\nexport type StateKey<T> = StateKeyFromCore<T>;\n\nexport {ApplicationConfig, bootstrapApplication, BrowserModule, createApplication, platformBrowser, provideProtractorTestingSupport} from './browser';\nexport {Meta, MetaDefinition} from './browser/meta';\nexport {Title} from './browser/title';\nexport {disableDebugTools, enableDebugTools} from './browser/tools/tools';\nexport {By} from './dom/debug/by';\nexport {REMOVE_STYLES_ON_COMPONENT_DESTROY} from './dom/dom_renderer';\nexport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nexport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerLoader, HammerModule} from './dom/events/hammer_gestures';\nexport {DomSanitizer, SafeHtml, SafeResourceUrl, SafeScript, SafeStyle, SafeUrl, SafeValue} from './security/dom_sanitization_service';\nexport {HydrationFeature, provideClientHydration, HydrationFeatureKind, withNoDomReuse, withNoHttpTransferCache} from './hydration';\n\nexport * from './private_export';\nexport {VERSION} from './version';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/platform-browser';\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}