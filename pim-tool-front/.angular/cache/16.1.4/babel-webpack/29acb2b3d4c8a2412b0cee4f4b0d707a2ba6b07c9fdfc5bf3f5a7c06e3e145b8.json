{"ast":null,"code":"import _asyncToGenerator from \"D:/ELCA_Bootcamp/Pilot_Projects/elca-java-exercises/pim-tool-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n * @license Angular v16.1.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, InjectionToken, ɵInitialRenderPendingTasks, Inject, ɵRuntimeError, PLATFORM_ID, makeEnvironmentProviders, NgModule, TransferState, makeStateKey, ɵENABLED_SSR_FEATURES, APP_BOOTSTRAP_LISTENER, ApplicationRef } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { concatMap, filter, map, finalize, switchMap, tap, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n  /**  Constructs a new HTTP header object with the given values.*/\n  constructor(headers) {\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n    this.lazyUpdate = null;\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key).push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map();\n      headers.forEach((values, name) => {\n        this.setHeaderEntries(name, values);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name) {\n    this.init();\n    return this.headers.has(name.toLowerCase());\n  }\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name) {\n    this.init();\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys() {\n    this.init();\n    return Array.from(this.normalizedNames.values());\n  }\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name) {\n    this.init();\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n  append(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'd'\n    });\n  }\n  maybeSetNormalizedName(name, lcName) {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n  init() {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n  copyFrom(other) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key));\n      this.normalizedNames.set(key, other.normalizedNames.get(key));\n    });\n  }\n  clone(update) {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n  applyUpdate(update) {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n  setHeaderEntries(name, values) {\n    const headerValues = (Array.isArray(values) ? values : [values]).map(value => value.toString());\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n  /**\n   * @internal\n   */\n  forEach(fn) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n  }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` + `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n}\nfunction paramParser(rawParams, codec) {\n  const map = new Map();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(param => {\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n  return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n  constructor(options = {}) {\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = options.fromObject[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param) {\n    this.init();\n    return this.map.has(param);\n  }\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param) {\n    this.init();\n    const res = this.map.get(param);\n    return !!res ? res[0] : null;\n  }\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param) {\n    this.init();\n    return this.map.get(param) || null;\n  }\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys() {\n    this.init();\n    return Array.from(this.map.keys());\n  }\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params) {\n    const updates = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({\n            param,\n            value: _value,\n            op: 'a'\n          });\n        });\n      } else {\n        updates.push({\n          param,\n          value: value,\n          op: 'a'\n        });\n      }\n    });\n    return this.clone(updates);\n  }\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'd'\n    });\n  }\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString() {\n    this.init();\n    return this.keys().map(key => {\n      const eKey = this.encoder.encodeKey(key);\n      // `a: ['1']` produces `'a=1'`\n      // `b: []` produces `''`\n      // `c: ['1', '2']` produces `'c=1&c=2'`\n      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');\n    })\n    // filter out empty values because `b: []` produces `''`\n    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n    .filter(param => param !== '').join('&');\n  }\n  clone(update) {\n    const clone = new HttpParams({\n      encoder: this.encoder\n    });\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n  init() {\n    if (this.map === null) {\n      this.map = new Map();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n      this.updates.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value));\n            this.map.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map.set(update.param, base);\n              } else {\n                this.map.delete(update.param);\n              }\n            } else {\n              this.map.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n  constructor(defaultValue) {\n    this.defaultValue = defaultValue;\n  }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n  constructor() {\n    this.map = new Map();\n  }\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set(token, value) {\n    this.map.set(token, value);\n    return this;\n  }\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get(token) {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token);\n  }\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token) {\n    this.map.delete(token);\n    return this;\n  }\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token) {\n    return this.map.has(token);\n  }\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys() {\n    return this.map.keys();\n  }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n  constructor(method, url, third, fourth) {\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     *\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\n     */\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n    this.responseType = 'json';\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options;\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    }\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n      if (!!options.context) {\n        this.context = options.context;\n      }\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n    // If no context have been passed in, construct a new HttpContext instance.\n    if (!this.context) {\n      this.context = new HttpContext();\n    }\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody() {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return this.body.toString();\n  }\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader() {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n  clone(update = {}) {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = update.body !== undefined ? update.body : this.body;\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n    const reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress;\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n    }\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n    }\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials\n    });\n  }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.ResponseHeader;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update = {}) {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.Response;\n    this.body = init.body !== undefined ? init.body : null;\n  }\n  clone(update = {}) {\n    return new HttpResponse({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n  constructor(init) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n    this.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n    this.ok = false;\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/understanding-communicating-with-http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n  constructor(handler) {\n    this.handler = handler;\n  }\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first, url, options = {}) {\n    let req;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n      // Figure out the headers.\n      let headers = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n      // Sort out parameters.\n      let params = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({\n            fromObject: options.params\n          });\n        }\n      }\n      // Construct the request.\n      req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials\n      });\n    }\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$ = of(req).pipe(concatMap(req => this.handler.handle(req)));\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$ = events$.pipe(filter(event => event instanceof HttpResponse));\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map(res => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map(res => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map(res => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map(res => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(url, options = {}) {\n    return this.request('DELETE', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url, options = {}) {\n    return this.request('GET', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url, options = {}) {\n    return this.request('HEAD', url, options);\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp(url, callbackParam) {\n    return this.request('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json'\n    });\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url, options = {}) {\n    return this.request('OPTIONS', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url, body, options = {}) {\n    return this.request('PATCH', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url, body, options = {}) {\n    return this.request('POST', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url, body, options = {}) {\n    return this.request('PUT', url, addBody(options, body));\n  }\n  static {\n    this.ɵfac = function HttpClient_Factory(t) {\n      return new (t || HttpClient)(i0.ɵɵinject(HttpHandler));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpClient,\n      factory: HttpClient.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\nconst XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\nconst REQUEST_URL_HEADER = `X-Request-URL`;\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl$1(response) {\n  if (response.url) {\n    return response.url;\n  }\n  // stored as lowercase in the map\n  const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n * @developerPreview\n */\nclass FetchBackend {\n  constructor() {\n    // We need to bind the native fetch to its context or it will throw an \"illegal invocation\"\n    this.fetchImpl = inject(FetchFactory, {\n      optional: true\n    })?.fetch ?? fetch.bind(globalThis);\n  }\n  handle(request) {\n    return new Observable(observer => {\n      const aborter = new AbortController();\n      this.doRequest(request, aborter.signal, observer).then(noop, error => observer.error(new HttpErrorResponse({\n        error\n      })));\n      return () => aborter.abort();\n    });\n  }\n  doRequest(request, signal, observer) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const init = _this.createRequestInit(request);\n      let response;\n      try {\n        const fetchPromise = _this.fetchImpl(request.urlWithParams, {\n          signal,\n          ...init\n        });\n        // Make sure Zone.js doesn't trigger false-positive unhandled promise\n        // error in case the Promise is rejected synchronously. See function\n        // description for additional information.\n        silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n        // Send the `Sent` event before awaiting the response.\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        response = yield fetchPromise;\n      } catch (error) {\n        observer.error(new HttpErrorResponse({\n          error,\n          status: error.status ?? 0,\n          statusText: error.statusText,\n          url: request.urlWithParams,\n          headers: error.headers\n        }));\n        return;\n      }\n      const headers = new HttpHeaders(response.headers);\n      const statusText = response.statusText;\n      const url = getResponseUrl$1(response) ?? request.urlWithParams;\n      let status = response.status;\n      let body = null;\n      if (request.reportProgress) {\n        observer.next(new HttpHeaderResponse({\n          headers,\n          status,\n          statusText,\n          url\n        }));\n      }\n      if (response.body) {\n        // Read Progress\n        const contentLength = response.headers.get('content-length');\n        const chunks = [];\n        const reader = response.body.getReader();\n        let receivedLength = 0;\n        let decoder;\n        let partialText;\n        while (true) {\n          const {\n            done,\n            value\n          } = yield reader.read();\n          if (done) {\n            break;\n          }\n          chunks.push(value);\n          receivedLength += value.length;\n          if (request.reportProgress) {\n            partialText = request.responseType === 'text' ? (partialText ?? '') + (decoder ??= new TextDecoder()).decode(value, {\n              stream: true\n            }) : undefined;\n            observer.next({\n              type: HttpEventType.DownloadProgress,\n              total: contentLength ? +contentLength : undefined,\n              loaded: receivedLength,\n              partialText\n            });\n          }\n        }\n        // Combine all chunks.\n        const chunksAll = _this.concatChunks(chunks, receivedLength);\n        try {\n          body = _this.parseBody(request, chunksAll);\n        } catch (error) {\n          // Body loading or parsing failed\n          observer.error(new HttpErrorResponse({\n            error,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: getResponseUrl$1(response) ?? request.urlWithParams\n          }));\n          return;\n        }\n      }\n      // Same behavior as the XhrBackend\n      if (status === 0) {\n        status = body ? 200 /* HttpStatusCode.Ok */ : 0;\n      }\n      // ok determines whether the response will be transmitted on the event or\n      // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n      // but a successful status code can still result in an error if the user\n      // asked for JSON data and the body cannot be parsed as such.\n      const ok = status >= 200 && status < 300;\n      if (ok) {\n        observer.next(new HttpResponse({\n          body,\n          headers,\n          status,\n          statusText,\n          url\n        }));\n        // The full body has been received and delivered, no further events\n        // are possible. This request is complete.\n        observer.complete();\n      } else {\n        observer.error(new HttpErrorResponse({\n          error: body,\n          headers,\n          status,\n          statusText,\n          url\n        }));\n      }\n    })();\n  }\n  parseBody(request, binContent) {\n    switch (request.responseType) {\n      case 'json':\n        // stripping the XSSI when present\n        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\n        return text === '' ? null : JSON.parse(text);\n      case 'text':\n        return new TextDecoder().decode(binContent);\n      case 'blob':\n        return new Blob([binContent]);\n      case 'arraybuffer':\n        return binContent.buffer;\n    }\n  }\n  createRequestInit(req) {\n    // We could share some of this logic with the XhrBackend\n    const headers = {};\n    const credentials = req.withCredentials ? 'include' : undefined;\n    // Setting all the requested headers.\n    req.headers.forEach((name, values) => headers[name] = values.join(','));\n    // Add an Accept header if one isn't present already.\n    headers['Accept'] ??= 'application/json, text/plain, */*';\n    // Auto-detect the Content-Type header if one isn't present already.\n    if (!headers['Content-Type']) {\n      const detectedType = req.detectContentTypeHeader();\n      // Sometimes Content-Type detection fails.\n      if (detectedType !== null) {\n        headers['Content-Type'] = detectedType;\n      }\n    }\n    return {\n      body: req.serializeBody(),\n      method: req.method,\n      headers,\n      credentials\n    };\n  }\n  concatChunks(chunks, totalLength) {\n    const chunksAll = new Uint8Array(totalLength);\n    let position = 0;\n    for (const chunk of chunks) {\n      chunksAll.set(chunk, position);\n      position += chunk.length;\n    }\n    return chunksAll;\n  }\n  static {\n    this.ɵfac = function FetchBackend_Factory(t) {\n      return new (t || FetchBackend)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: FetchBackend,\n      factory: FetchBackend.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FetchBackend, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nclass FetchFactory {}\nfunction noop() {}\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\n  promise.then(noop, noop);\n}\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n  return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n  });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n  // clang-format off\n  return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n  // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n  let chain = null;\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {\n        optional: true\n      }) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n    }\n    const pendingTasks = inject(ɵInitialRenderPendingTasks);\n    const taskId = pendingTasks.add();\n    return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n  };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n  constructor(backend, injector) {\n    super();\n    this.backend = backend;\n    this.injector = injector;\n    this.chain = null;\n    this.pendingTasks = inject(ɵInitialRenderPendingTasks);\n  }\n  handle(initialRequest) {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set([...this.injector.get(HTTP_INTERCEPTOR_FNS), ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, [])]));\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n    }\n    const taskId = this.pendingTasks.add();\n    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest)).pipe(finalize(() => this.pendingTasks.remove(taskId)));\n  }\n  static {\n    this.ɵfac = function HttpInterceptorHandler_Factory(t) {\n      return new (t || HttpInterceptorHandler)(i0.ɵɵinject(HttpBackend), i0.ɵɵinject(i0.EnvironmentInjector));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpInterceptorHandler,\n      factory: HttpInterceptorHandler.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpInterceptorHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n  constructor(callbackMap, document) {\n    this.callbackMap = callbackMap;\n    this.document = document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n    this.resolvedPromise = Promise.resolve();\n  }\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  nextCallback() {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req) {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    }\n    // Everything else happens inside the Observable boundary.\n    return new Observable(observer => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n      // The response object, if one has been received, or null otherwise.\n      let body = null;\n      // Whether the response callback has been called.\n      let finished = false;\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = data => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = event => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK)\n            }));\n            return;\n          }\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(new HttpResponse({\n            body,\n            status: 200 /* HttpStatusCode.Ok */,\n            statusText: 'OK',\n            url\n          }));\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError = error => {\n        cleanup();\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url\n        }));\n      };\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n      // The request has now been successfully sent.\n      observer.next({\n        type: HttpEventType.Sent\n      });\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n  removeListeners(script) {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    if (!foreignDocument) {\n      foreignDocument = this.document.implementation.createHTMLDocument();\n    }\n    foreignDocument.adoptNode(script);\n  }\n  static {\n    this.ɵfac = function JsonpClientBackend_Factory(t) {\n      return new (t || JsonpClientBackend)(i0.ɵɵinject(JsonpCallbackContext), i0.ɵɵinject(DOCUMENT));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: JsonpClientBackend,\n      factory: JsonpClientBackend.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req);\n  }\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(initialRequest, next) {\n    return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n  static {\n    this.ɵfac = function JsonpInterceptor_Factory(t) {\n      return new (t || JsonpInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: JsonpInterceptor,\n      factory: JsonpInterceptor.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n  constructor(xhrFactory) {\n    this.xhrFactory = xhrFactory;\n  }\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req) {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new ɵRuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n    }\n    // Check whether this factory has a special function to load an XHR implementation\n    // for various non-browser environments. We currently limit it to only `ServerXhr`\n    // class, which needs to load an XHR implementation.\n    const xhrFactory = this.xhrFactory;\n    const source = xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n    return source.pipe(switchMap(() => {\n      // Everything happens on Observable subscription.\n      return new Observable(observer => {\n        // Start by setting up the XHR object with request method, URL, and withCredentials\n        // flag.\n        const xhr = xhrFactory.build();\n        xhr.open(req.method, req.urlWithParams);\n        if (req.withCredentials) {\n          xhr.withCredentials = true;\n        }\n        // Add all the requested headers.\n        req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n        // Add an Accept header if one isn't present already.\n        if (!req.headers.has('Accept')) {\n          xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n        }\n        // Auto-detect the Content-Type header if one isn't present already.\n        if (!req.headers.has('Content-Type')) {\n          const detectedType = req.detectContentTypeHeader();\n          // Sometimes Content-Type detection fails.\n          if (detectedType !== null) {\n            xhr.setRequestHeader('Content-Type', detectedType);\n          }\n        }\n        // Set the responseType if one was requested.\n        if (req.responseType) {\n          const responseType = req.responseType.toLowerCase();\n          // JSON responses need to be processed as text. This is because if the server\n          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n          // xhr.response will be null, and xhr.responseText cannot be accessed to\n          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n          // is parsed by first requesting text and then applying JSON.parse.\n          xhr.responseType = responseType !== 'json' ? responseType : 'text';\n        }\n        // Serialize the request body if one is present. If not, this will be set to null.\n        const reqBody = req.serializeBody();\n        // If progress events are enabled, response headers will be delivered\n        // in two events - the HttpHeaderResponse event and the full HttpResponse\n        // event. However, since response headers don't change in between these\n        // two events, it doesn't make sense to parse them twice. So headerResponse\n        // caches the data extracted from the response whenever it's first parsed,\n        // to ensure parsing isn't duplicated.\n        let headerResponse = null;\n        // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n        // state, and memoizes it into headerResponse.\n        const partialFromXhr = () => {\n          if (headerResponse !== null) {\n            return headerResponse;\n          }\n          const statusText = xhr.statusText || 'OK';\n          // Parse headers from XMLHttpRequest - this step is lazy.\n          const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n          // Read the response URL from the XMLHttpResponse instance and fall back on the\n          // request URL.\n          const url = getResponseUrl(xhr) || req.url;\n          // Construct the HttpHeaderResponse and memoize it.\n          headerResponse = new HttpHeaderResponse({\n            headers,\n            status: xhr.status,\n            statusText,\n            url\n          });\n          return headerResponse;\n        };\n        // Next, a few closures are defined for the various events which XMLHttpRequest can\n        // emit. This allows them to be unregistered as event listeners later.\n        // First up is the load event, which represents a response being fully available.\n        const onLoad = () => {\n          // Read response state from the memoized partial data.\n          let {\n            headers,\n            status,\n            statusText,\n            url\n          } = partialFromXhr();\n          // The body will be read out if present.\n          let body = null;\n          if (status !== 204 /* HttpStatusCode.NoContent */) {\n            // Use XMLHttpRequest.response if set, responseText otherwise.\n            body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n          }\n          // Normalize another potential bug (this one comes from CORS).\n          if (status === 0) {\n            status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n          }\n          // ok determines whether the response will be transmitted on the event or\n          // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n          // but a successful status code can still result in an error if the user\n          // asked for JSON data and the body cannot be parsed as such.\n          let ok = status >= 200 && status < 300;\n          // Check whether the body needs to be parsed as JSON (in many cases the browser\n          // will have done that already).\n          if (req.responseType === 'json' && typeof body === 'string') {\n            // Save the original body, before attempting XSSI prefix stripping.\n            const originalBody = body;\n            body = body.replace(XSSI_PREFIX, '');\n            try {\n              // Attempt the parse. If it fails, a parse error should be delivered to the\n              // user.\n              body = body !== '' ? JSON.parse(body) : null;\n            } catch (error) {\n              // Since the JSON.parse failed, it's reasonable to assume this might not have\n              // been a JSON response. Restore the original body (including any XSSI prefix)\n              // to deliver a better error response.\n              body = originalBody;\n              // If this was an error request to begin with, leave it as a string, it\n              // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n              if (ok) {\n                // Even though the response status was 2xx, this is still an error.\n                ok = false;\n                // The parse error contains the text of the body that failed to parse.\n                body = {\n                  error,\n                  text: body\n                };\n              }\n            }\n          }\n          if (ok) {\n            // A successful response is delivered on the event stream.\n            observer.next(new HttpResponse({\n              body,\n              headers,\n              status,\n              statusText,\n              url: url || undefined\n            }));\n            // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n            observer.complete();\n          } else {\n            // An unsuccessful request is delivered on the error channel.\n            observer.error(new HttpErrorResponse({\n              // The error in this case is the response body (error from the server).\n              error: body,\n              headers,\n              status,\n              statusText,\n              url: url || undefined\n            }));\n          }\n        };\n        // The onError callback is called when something goes wrong at the network level.\n        // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n        // transmitted on the error channel.\n        const onError = error => {\n          const {\n            url\n          } = partialFromXhr();\n          const res = new HttpErrorResponse({\n            error,\n            status: xhr.status || 0,\n            statusText: xhr.statusText || 'Unknown Error',\n            url: url || undefined\n          });\n          observer.error(res);\n        };\n        // The sentHeaders flag tracks whether the HttpResponseHeaders event\n        // has been sent on the stream. This is necessary to track if progress\n        // is enabled since the event will be sent on only the first download\n        // progress event.\n        let sentHeaders = false;\n        // The download progress event handler, which is only registered if\n        // progress events are enabled.\n        const onDownProgress = event => {\n          // Send the HttpResponseHeaders event if it hasn't been sent already.\n          if (!sentHeaders) {\n            observer.next(partialFromXhr());\n            sentHeaders = true;\n          }\n          // Start building the download progress event to deliver on the response\n          // event stream.\n          let progressEvent = {\n            type: HttpEventType.DownloadProgress,\n            loaded: event.loaded\n          };\n          // Set the total number of bytes in the event if it's available.\n          if (event.lengthComputable) {\n            progressEvent.total = event.total;\n          }\n          // If the request was for text content and a partial response is\n          // available on XMLHttpRequest, include it in the progress event\n          // to allow for streaming reads.\n          if (req.responseType === 'text' && !!xhr.responseText) {\n            progressEvent.partialText = xhr.responseText;\n          }\n          // Finally, fire the event.\n          observer.next(progressEvent);\n        };\n        // The upload progress event handler, which is only registered if\n        // progress events are enabled.\n        const onUpProgress = event => {\n          // Upload progress events are simpler. Begin building the progress\n          // event.\n          let progress = {\n            type: HttpEventType.UploadProgress,\n            loaded: event.loaded\n          };\n          // If the total number of bytes being uploaded is available, include\n          // it.\n          if (event.lengthComputable) {\n            progress.total = event.total;\n          }\n          // Send the event.\n          observer.next(progress);\n        };\n        // By default, register for load and error events.\n        xhr.addEventListener('load', onLoad);\n        xhr.addEventListener('error', onError);\n        xhr.addEventListener('timeout', onError);\n        xhr.addEventListener('abort', onError);\n        // Progress events are only enabled if requested.\n        if (req.reportProgress) {\n          // Download progress is always enabled if requested.\n          xhr.addEventListener('progress', onDownProgress);\n          // Upload progress depends on whether there is a body to upload.\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.addEventListener('progress', onUpProgress);\n          }\n        }\n        // Fire the request, and notify the event stream that it was fired.\n        xhr.send(reqBody);\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        // This is the return from the Observable function, which is the\n        // request cancellation handler.\n        return () => {\n          // On a cancellation, remove all registered event listeners.\n          xhr.removeEventListener('error', onError);\n          xhr.removeEventListener('abort', onError);\n          xhr.removeEventListener('load', onLoad);\n          xhr.removeEventListener('timeout', onError);\n          if (req.reportProgress) {\n            xhr.removeEventListener('progress', onDownProgress);\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.removeEventListener('progress', onUpProgress);\n            }\n          }\n          // Finally, abort the in-flight request.\n          if (xhr.readyState !== xhr.DONE) {\n            xhr.abort();\n          }\n        };\n      });\n    }));\n  }\n  static {\n    this.ɵfac = function HttpXhrBackend_Factory(t) {\n      return new (t || HttpXhrBackend)(i0.ɵɵinject(i1.XhrFactory));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpXhrBackend,\n      factory: HttpXhrBackend.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.XhrFactory\n    }];\n  }, null);\n})();\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n  constructor(doc, platform, cookieName) {\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\n     * @internal for testing\n     */\n    this.parseCount = 0;\n  }\n  getToken() {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n  static {\n    this.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {\n      return new (t || HttpXsrfCookieExtractor)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(XSRF_COOKIE_NAME));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpXsrfCookieExtractor,\n      factory: HttpXsrfCookieExtractor.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\nfunction xsrfInterceptorFn(req, next) {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({\n      headers: req.headers.set(headerName, token)\n    });\n  }\n  return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  intercept(initialRequest, next) {\n    return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n  static {\n    this.ɵfac = function HttpXsrfInterceptor_Factory(t) {\n      return new (t || HttpXsrfInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: HttpXsrfInterceptor,\n      factory: HttpXsrfInterceptor.ɵfac\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n  HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n  HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n  HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n  HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n  HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nfunction provideHttpClient(...features) {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.ɵkind));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(ngDevMode ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` : '');\n    }\n  }\n  const providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {\n    provide: HttpHandler,\n    useExisting: HttpInterceptorHandler\n  }, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: xsrfInterceptorFn,\n    multi: true\n  }, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }];\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n  return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true\n    };\n  }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{\n    provide: LEGACY_INTERCEPTOR_FN,\n    useFactory: legacyInterceptorFnFactory\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useExisting: LEGACY_INTERCEPTOR_FN,\n    multi: true\n  }]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration({\n  cookieName,\n  headerName\n}) {\n  const providers = [];\n  if (cookieName !== undefined) {\n    providers.push({\n      provide: XSRF_COOKIE_NAME,\n      useValue: cookieName\n    });\n  }\n  if (headerName !== undefined) {\n    providers.push({\n      provide: XSRF_HEADER_NAME,\n      useValue: headerName\n    });\n  }\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{\n    provide: XSRF_ENABLED,\n    useValue: false\n  }]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: jsonpInterceptorFn,\n    multi: true\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [{\n    provide: HttpBackend,\n    useFactory: () => {\n      const handlerFromParent = inject(HttpHandler, {\n        skipSelf: true,\n        optional: true\n      });\n      if (ngDevMode && handlerFromParent === null) {\n        throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n      }\n      return handlerFromParent;\n    }\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * This `FetchBackend` requires the support of the Fetch API which is available on all evergreen\n * browsers and on NodeJS from v18 onward.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n * @developerPreview\n */\nfunction withFetch() {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof fetch !== 'function') {\n    // TODO: Create a runtime error\n    // TODO: Use ENVIRONMENT_INITIALIZER to contextualize the error message (browser or server)\n    throw new Error('The `withFetch` feature of HttpClient requires the `fetch` API to be available. ' + 'If you run the code in a Node environment, make sure you use Node v18.10 or later.');\n  }\n  return makeHttpFeature(HttpFeatureKind.Fetch, [FetchBackend, {\n    provide: HttpBackend,\n    useExisting: FetchBackend\n  }]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable() {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [withNoXsrfProtection().ɵproviders]\n    };\n  }\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options = {}) {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders\n    };\n  }\n  static {\n    this.ɵfac = function HttpClientXsrfModule_Factory(t) {\n      return new (t || HttpClientXsrfModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: HttpClientXsrfModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }).ɵproviders, {\n        provide: XSRF_ENABLED,\n        useValue: true\n      }]\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }).ɵproviders, {\n        provide: XSRF_ENABLED,\n        useValue: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n  static {\n    this.ɵfac = function HttpClientModule_Factory(t) {\n      return new (t || HttpClientModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: HttpClientModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [provideHttpClient(withInterceptorsFromDi())]\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\n       * with supporting services for HTTP communications.\n       */\n      providers: [provideHttpClient(withInterceptorsFromDi())]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n  static {\n    this.ɵfac = function HttpClientJsonpModule_Factory(t) {\n      return new (t || HttpClientJsonpModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: HttpClientJsonpModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [withJsonpSupport().ɵproviders]\n    });\n  }\n}\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [withJsonpSupport().ɵproviders]\n    }]\n  }], null, null);\n})();\nconst CACHE_STATE = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_STATE' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\nfunction transferCacheInterceptorFn(req, next) {\n  const {\n    isCacheActive\n  } = inject(CACHE_STATE);\n  // Stop using the cache if the application has stabilized, indicating initial rendering\n  // is complete.\n  if (!isCacheActive || !ALLOWED_METHODS.includes(req.method)) {\n    // Cache is no longer active or method is not HEAD or GET.\n    // Pass the request through.\n    return next(req);\n  }\n  const transferState = inject(TransferState);\n  const storeKey = makeCacheKey(req);\n  const response = transferState.get(storeKey, null);\n  if (response) {\n    // Request found in cache. Respond using it.\n    let body = response.body;\n    switch (response.responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(response.body).buffer;\n        break;\n      case 'blob':\n        body = new Blob([response.body]);\n        break;\n    }\n    return of(new HttpResponse({\n      body,\n      headers: new HttpHeaders(response.headers),\n      status: response.status,\n      statusText: response.statusText,\n      url: response.url\n    }));\n  }\n  // Request not found in cache. Make the request and cache it.\n  return next(req).pipe(tap(event => {\n    if (event instanceof HttpResponse) {\n      transferState.set(storeKey, {\n        body: event.body,\n        headers: getHeadersMap(event.headers),\n        status: event.status,\n        statusText: event.statusText,\n        url: event.url || '',\n        responseType: req.responseType\n      });\n    }\n  }));\n}\nfunction getHeadersMap(headers) {\n  const headersMap = {};\n  for (const key of headers.keys()) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n  return headersMap;\n}\nfunction makeCacheKey(request) {\n  // make the params encoded same as a url so it's easy to identify\n  const {\n    params,\n    method,\n    responseType,\n    url\n  } = request;\n  const encodedParams = params.keys().sort().map(k => `${k}=${params.getAll(k)}`).join('&');\n  const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n  const hash = generateHash(key);\n  return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value) {\n  let hash = 0;\n  for (const char of value) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  }\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n  return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nfunction withHttpTransferCache() {\n  return [{\n    provide: CACHE_STATE,\n    useFactory: () => {\n      inject(ɵENABLED_SSR_FEATURES).add('httpcache');\n      return {\n        isCacheActive: true\n      };\n    }\n  }, {\n    provide: HTTP_ROOT_INTERCEPTOR_FNS,\n    useValue: transferCacheInterceptorFn,\n    multi: true,\n    deps: [TransferState, CACHE_STATE]\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: () => {\n      const appRef = inject(ApplicationRef);\n      const cacheState = inject(CACHE_STATE);\n      return () => {\n        appRef.isStable.pipe(first(isStable => isStable)).toPromise().then(() => {\n          cacheState.isCacheActive = false;\n        });\n      };\n    }\n  }];\n}\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FetchBackend, HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, withHttpTransferCache as ɵwithHttpTransferCache };","map":{"version":3,"names":["HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Headers","values","setHeaderEntries","ngDevMode","assertValidHeaders","Object","entries","init","length","keys","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","headerValues","isArray","map","toString","fn","Error","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","res","appendAll","_value","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","of","pipe","concatMap","handle","res$","event","head","jsonp","callbackParam","patch","post","put","Injectable","XSSI_PREFIX$1","REQUEST_URL_HEADER","getResponseUrl$1","getResponseUrl","response","xRequestUrl","toLocaleLowerCase","FetchBackend","fetchImpl","inject","FetchFactory","optional","fetch","bind","globalThis","Observable","observer","aborter","AbortController","doRequest","signal","then","noop","abort","_this","_asyncToGenerator","createRequestInit","fetchPromise","silenceSuperfluousUnhandledPromiseRejection","next","Sent","contentLength","chunks","reader","getReader","receivedLength","decoder","partialText","done","read","TextDecoder","decode","stream","DownloadProgress","total","loaded","chunksAll","concatChunks","parseBody","complete","binContent","text","parse","buffer","credentials","detectedType","totalLength","Uint8Array","position","chunk","factory","ɵfac","promise","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","runInContext","HTTP_INTERCEPTORS","InjectionToken","HTTP_INTERCEPTOR_FNS","HTTP_ROOT_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","interceptors","reduceRight","pendingTasks","ɵInitialRenderPendingTasks","taskId","add","finalize","remove","HttpInterceptorHandler","backend","dedupedInterceptorFns","Set","nextSequencedFn","i0","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","callback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","onLoad","onError","addEventListener","appendChild","removeListeners","script","implementation","createHTMLDocument","adoptNode","JsonpClientBackend_Factory","DOCUMENT","Inject","jsonpInterceptorFn","JsonpInterceptor","XSSI_PREFIX","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","ɵRuntimeError","source","ɵloadImpl","switchMap","build","open","setRequestHeader","reqBody","headerResponse","partialFromXhr","responseText","originalBody","sentHeaders","onDownProgress","progressEvent","lengthComputable","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","i1","XhrFactory","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","providedIn","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","ɵparseCookieValue","HttpXsrfCookieExtractor_Factory","PLATFORM_ID","xsrfInterceptorFn","lcUrl","startsWith","headerName","HttpXsrfInterceptor","HttpFeatureKind","makeHttpFeature","kind","providers","ɵkind","ɵproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useValue","multi","useClass","feature","makeEnvironmentProviders","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","useFactory","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","withFetch","Fetch","HttpClientXsrfModule","disable","ngModule","withOptions","ɵinj","NgModule","args","HttpClientModule","HttpClientJsonpModule","CACHE_STATE","ALLOWED_METHODS","transferCacheInterceptorFn","isCacheActive","includes","transferState","TransferState","storeKey","makeCacheKey","TextEncoder","encode","tap","getHeadersMap","headersMap","encodedParams","sort","k","hash","generateHash","makeStateKey","char","Math","imul","charCodeAt","withHttpTransferCache","ɵENABLED_SSR_FEATURES","deps","APP_BOOTSTRAP_LISTENER","appRef","ApplicationRef","cacheState","isStable","toPromise"],"sources":["D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\backend.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\headers.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\params.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\context.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\request.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\response.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\client.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\fetch.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\interceptor.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\jsonp.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\xhr.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\xsrf.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\provider.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\module.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\src\\transfer_cache.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\index.ts","D:\\ELCA_Bootcamp\\Pilot_Projects\\packages\\common\\http\\http.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\n\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers!: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit!: HttpHeaders|Function|null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | number | (string | number)[]}|Headers) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key)!.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map<string, string[]>();\n      headers.forEach((values: string, name: string) => {\n        this.setHeaderEntries(name, values);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map<string, string[]>();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete(name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key)!);\n      this.normalizedNames.set(key, other.normalizedNames.get(key)!);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value!;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  private setHeaderEntries(name: string, values: any) {\n    const headerValues =\n        (Array.isArray(values) ? values : [values]).map((value) => value.toString());\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key)!, this.headers.get(key)!));\n  }\n}\n\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers: Record<string, unknown>|Headers):\n    asserts headers is Record<string, string|string[]|number|number[]> {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(\n          `Unexpected value of the \\`${key}\\` header provided. ` +\n          `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string {\n    return standardEncoding(key);\n  }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string {\n    return standardEncoding(value);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string {\n    return decodeURIComponent(key);\n  }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) {\n    return decodeURIComponent(value);\n  }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params: string[] = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS: {[x: string]: string} = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/',\n};\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v).replace(\n      STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\n\nfunction valueToString(value: string|number|boolean): string {\n  return `${value}`;\n}\n\ninterface Update {\n  param: string;\n  value?: string|number|boolean;\n  op: 'a'|'d'|'s';\n}\n\n/**\n * Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>};\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map!.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map!.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map!.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map!.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map!.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'a'});\n  }\n\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n  appendAll(params: {[param: string]: string|number|boolean|ReadonlyArray<string|number|boolean>}):\n      HttpParams {\n    const updates: Update[] = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({param, value: _value, op: 'a'});\n        });\n      } else {\n        updates.push({param, value: value as (string | number | boolean), op: 'a'});\n      }\n    });\n    return this.clone(updates);\n  }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 's'});\n  }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete(param: string, value?: string|number|boolean): HttpParams {\n    return this.clone({param, value, op: 'd'});\n  }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          // `a: ['1']` produces `'a=1'`\n          // `b: []` produces `''`\n          // `c: ['1', '2']` produces `'c=1&c=2'`\n          return this.map!.get(key)!.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        // filter out empty values because `b: []` produces `''`\n        // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n        .filter(param => param !== '')\n        .join('&');\n  }\n\n  private clone(update: Update|Update[]): HttpParams {\n    const clone = new HttpParams({encoder: this.encoder} as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map!.set(key, this.cloneFrom!.map!.get(key)!));\n      this.updates!.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map!.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value!));\n            this.map!.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map!.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map!.set(update.param, base);\n              } else {\n                this.map!.delete(update.param);\n              }\n            } else {\n              this.map!.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nexport class HttpContextToken<T> {\n  constructor(public readonly defaultValue: () => T) {}\n}\n\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nexport class HttpContext {\n  private readonly map = new Map<HttpContextToken<unknown>, unknown>();\n\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  set<T>(token: HttpContextToken<T>, value: T): HttpContext {\n    this.map.set(token, value);\n    return this;\n  }\n\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n  get<T>(token: HttpContextToken<T>): T {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token) as T;\n  }\n\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n  delete(token: HttpContextToken<unknown>): HttpContext {\n    this.map.delete(token);\n    return this;\n  }\n\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n  has(token: HttpContextToken<unknown>): boolean {\n    return this.map.has(token);\n  }\n\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n  keys(): IterableIterator<HttpContextToken<unknown>> {\n    return this.map.keys();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  context?: HttpContext;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value: any): value is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers!: HttpHeaders;\n\n  /**\n   * Shared and mutable context that can be used by interceptors\n   */\n  readonly context!: HttpContext;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   *\n   * To pass a string representation of HTTP parameters in the URL-query-string format,\n   * the `HttpParamsOptions`' `fromString` may be used. For example:\n   *\n   * ```\n   * new HttpParams({fromString: 'angular=awesome'})\n   * ```\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params!: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  constructor(method: 'DELETE'|'GET'|'HEAD'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST'|'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        context?: HttpContext,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no context have been passed in, construct a new HttpContext instance.\n    if (!this.context) {\n      this.context = new HttpContext();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|URLSearchParams|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        typeof this.body === 'boolean') {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    context?: HttpContext,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string|string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials,\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * Note: The `FetchBackend` doesn't support progress report on uploads.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent {\n  type: HttpEventType.Sent;\n}\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> {\n  type: HttpEventType.User;\n}\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent|HttpHeaderResponse|HttpResponse<T>|HttpProgressEvent|HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code, defaults to OK.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type!: HttpEventType.Response|HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = HttpStatusCode.Ok, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  override readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  override readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V|null,\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any|null;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  override readonly ok = false;\n\n  constructor(init: {\n    error?: any;\n    headers?: HttpHeaders;\n    status?: number;\n    statusText?: string;\n    url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${\n          init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\n * Http status codes.\n * As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n * @publicApi\n */\nexport const enum HttpStatusCode {\n  Continue = 100,\n  SwitchingProtocols = 101,\n  Processing = 102,\n  EarlyHints = 103,\n\n  Ok = 200,\n  Created = 201,\n  Accepted = 202,\n  NonAuthoritativeInformation = 203,\n  NoContent = 204,\n  ResetContent = 205,\n  PartialContent = 206,\n  MultiStatus = 207,\n  AlreadyReported = 208,\n  ImUsed = 226,\n\n  MultipleChoices = 300,\n  MovedPermanently = 301,\n  Found = 302,\n  SeeOther = 303,\n  NotModified = 304,\n  UseProxy = 305,\n  Unused = 306,\n  TemporaryRedirect = 307,\n  PermanentRedirect = 308,\n\n  BadRequest = 400,\n  Unauthorized = 401,\n  PaymentRequired = 402,\n  Forbidden = 403,\n  NotFound = 404,\n  MethodNotAllowed = 405,\n  NotAcceptable = 406,\n  ProxyAuthenticationRequired = 407,\n  RequestTimeout = 408,\n  Conflict = 409,\n  Gone = 410,\n  LengthRequired = 411,\n  PreconditionFailed = 412,\n  PayloadTooLarge = 413,\n  UriTooLong = 414,\n  UnsupportedMediaType = 415,\n  RangeNotSatisfiable = 416,\n  ExpectationFailed = 417,\n  ImATeapot = 418,\n  MisdirectedRequest = 421,\n  UnprocessableEntity = 422,\n  Locked = 423,\n  FailedDependency = 424,\n  TooEarly = 425,\n  UpgradeRequired = 426,\n  PreconditionRequired = 428,\n  TooManyRequests = 429,\n  RequestHeaderFieldsTooLarge = 431,\n  UnavailableForLegalReasons = 451,\n\n  InternalServerError = 500,\n  NotImplemented = 501,\n  BadGateway = 502,\n  ServiceUnavailable = 503,\n  GatewayTimeout = 504,\n  HttpVersionNotSupported = 505,\n  VariantAlsoNegotiates = 506,\n  InsufficientStorage = 507,\n  LoopDetected = 508,\n  NotExtended = 510,\n  NetworkAuthenticationRequired = 511\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpContext} from './context';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders|{[header: string]: string | string[]},\n      context?: HttpContext,\n      observe?: 'body'|'events'|'response',\n      params?: HttpParams|\n            {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer'|'blob'|'json'|'text',\n      withCredentials?: boolean,\n    },\n    body: T|null): any {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n  };\n}\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/understanding-communicating-with-http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HttpRequest` and returns a stream of `HttpEvent`s.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HttpEvent`s.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in\n   * an `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HttpEvent`s for\n   * the request.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n          observe: 'events',\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'events',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns\n   * the full `HttpResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    reportProgress?: boolean, observe: 'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object and returns the full\n   * `HttpResponse` as a JavaScript object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JavaScript object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the requested response, with body of type `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    observe?: 'body'|'events'|'response',\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  }): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({fromObject: options.params} as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url!, (options.body !== undefined ? options.body : null), {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of(req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the response body as a\n   * `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with response body of\n   * type `Object`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | (string | number | boolean)[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Blob`.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`, with the response body of type string.\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JavaScript object and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of type `Object`.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with the response body of the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with response body in the requested type.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n    body?: any|null,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the\n   * response in an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JavaScript object.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as JSON and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body in the requested type.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body of type\n   * string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the requested type.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `HEAD` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as JSON and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request with the response\n   * body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and\n   * returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as JSON and returns the\n   * response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse`, with a response body of the given type.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with the\n   * response body as `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request, with a\n   * response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n\n   * Constructs a `PATCH` request that interprets the body as JSON and\n   * returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as JSON\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with the response body as `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvent`s for the request,\n   * with a response body of type `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the full `HttpResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON and returns the\n   * full `HttpResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns the response body as an object parsed from JSON.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an object parsed from JSON.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as JSON\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request, with a response body in the\n   * requested type.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event\n   * stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body\n   * of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request, with a response body of\n   * type `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvent`s for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'events',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with the response body as an\n   * `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'arraybuffer',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'blob',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body of type\n   * string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean, responseType: 'text',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON and returns the full\n   * HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type and\n   * returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]}, observe: 'response',\n    context?: HttpContext,\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as JSON\n   * and returns an observable of JavaScript object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response as a JavaScript object.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an instance of the requested type\n   * and returns an observable of the requested type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the requested type.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    context?: HttpContext,\n    observe?: 'body'|'events'|'response',\n    params?: HttpParams|\n          {[param: string]: string | number | boolean | ReadonlyArray<string|number|boolean>},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpResponse, HttpStatusCode} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\nconst REQUEST_URL_HEADER = `X-Request-URL`;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl(response: Response): string|null {\n  if (response.url) {\n    return response.url;\n  }\n  // stored as lowercase in the map\n  const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n * @developerPreview\n */\n@Injectable()\nexport class FetchBackend implements HttpBackend {\n  // We need to bind the native fetch to its context or it will throw an \"illegal invocation\"\n  private readonly fetchImpl =\n      inject(FetchFactory, {optional: true})?.fetch ?? fetch.bind(globalThis);\n\n  handle(request: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return new Observable(observer => {\n      const aborter = new AbortController();\n      this.doRequest(request, aborter.signal, observer)\n          .then(noop, error => observer.error(new HttpErrorResponse({error})));\n      return () => aborter.abort();\n    });\n  }\n\n  private async doRequest(\n      request: HttpRequest<any>, signal: AbortSignal,\n      observer: Observer<HttpEvent<any>>): Promise<void> {\n    const init = this.createRequestInit(request);\n    let response;\n\n    try {\n      const fetchPromise = this.fetchImpl(request.urlWithParams, {signal, ...init});\n\n      // Make sure Zone.js doesn't trigger false-positive unhandled promise\n      // error in case the Promise is rejected synchronously. See function\n      // description for additional information.\n      silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n\n      // Send the `Sent` event before awaiting the response.\n      observer.next({type: HttpEventType.Sent});\n\n      response = await fetchPromise;\n    } catch (error: any) {\n      observer.error(new HttpErrorResponse({\n        error,\n        status: error.status ?? 0,\n        statusText: error.statusText,\n        url: request.urlWithParams,\n        headers: error.headers,\n      }));\n      return;\n    }\n\n    const headers = new HttpHeaders(response.headers);\n    const statusText = response.statusText;\n    const url = getResponseUrl(response) ?? request.urlWithParams;\n\n    let status = response.status;\n    let body: string|ArrayBuffer|Blob|object|null = null;\n\n    if (request.reportProgress) {\n      observer.next(new HttpHeaderResponse({headers, status, statusText, url}));\n    }\n\n    if (response.body) {\n      // Read Progress\n      const contentLength = response.headers.get('content-length');\n      const chunks: Uint8Array[] = [];\n      const reader = response.body.getReader();\n      let receivedLength = 0;\n\n      let decoder: TextDecoder;\n      let partialText: string|undefined;\n\n      while (true) {\n        const {done, value} = await reader.read();\n\n        if (done) {\n          break;\n        }\n\n        chunks.push(value);\n        receivedLength += value.length;\n\n        if (request.reportProgress) {\n          partialText = request.responseType === 'text' ?\n              (partialText ?? '') + (decoder ??= new TextDecoder).decode(value, {stream: true}) :\n              undefined;\n\n          observer.next({\n            type: HttpEventType.DownloadProgress,\n            total: contentLength ? +contentLength : undefined,\n            loaded: receivedLength,\n            partialText,\n          } as HttpDownloadProgressEvent);\n        }\n      }\n\n      // Combine all chunks.\n      const chunksAll = this.concatChunks(chunks, receivedLength);\n      try {\n        body = this.parseBody(request, chunksAll);\n      } catch (error) {\n        // Body loading or parsing failed\n        observer.error(new HttpErrorResponse({\n          error,\n          headers: new HttpHeaders(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          url: getResponseUrl(response) ?? request.urlWithParams,\n        }));\n        return;\n      }\n    }\n\n    // Same behavior as the XhrBackend\n    if (status === 0) {\n      status = body ? HttpStatusCode.Ok : 0;\n    }\n\n    // ok determines whether the response will be transmitted on the event or\n    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n    // but a successful status code can still result in an error if the user\n    // asked for JSON data and the body cannot be parsed as such.\n    const ok = status >= 200 && status < 300;\n\n    if (ok) {\n      observer.next(new HttpResponse({\n        body,\n        headers,\n        status,\n        statusText,\n        url,\n      }));\n\n      // The full body has been received and delivered, no further events\n      // are possible. This request is complete.\n      observer.complete();\n    } else {\n      observer.error(new HttpErrorResponse({\n        error: body,\n        headers,\n        status,\n        statusText,\n        url,\n      }));\n    }\n  }\n\n  private parseBody(request: HttpRequest<any>, binContent: Uint8Array): string|ArrayBuffer|Blob\n      |object|null {\n    switch (request.responseType) {\n      case 'json':\n        // stripping the XSSI when present\n        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX, '');\n        return text === '' ? null : JSON.parse(text) as object;\n      case 'text':\n        return new TextDecoder().decode(binContent);\n      case 'blob':\n        return new Blob([binContent]);\n      case 'arraybuffer':\n        return binContent.buffer;\n    }\n  }\n\n  private createRequestInit(req: HttpRequest<any>): RequestInit {\n    // We could share some of this logic with the XhrBackend\n\n    const headers: Record<string, string> = {};\n    const credentials: RequestCredentials|undefined = req.withCredentials ? 'include' : undefined;\n\n    // Setting all the requested headers.\n    req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n\n    // Add an Accept header if one isn't present already.\n    headers['Accept'] ??= 'application/json, text/plain, */*';\n\n    // Auto-detect the Content-Type header if one isn't present already.\n    if (!headers['Content-Type']) {\n      const detectedType = req.detectContentTypeHeader();\n      // Sometimes Content-Type detection fails.\n      if (detectedType !== null) {\n        headers['Content-Type'] = detectedType;\n      }\n    }\n\n    return {\n      body: req.serializeBody(),\n      method: req.method,\n      headers,\n      credentials,\n    };\n  }\n\n  private concatChunks(chunks: Uint8Array[], totalLength: number): Uint8Array {\n    const chunksAll = new Uint8Array(totalLength);\n    let position = 0;\n    for (const chunk of chunks) {\n      chunksAll.set(chunk, position);\n      position += chunk.length;\n    }\n\n    return chunksAll;\n  }\n}\n\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nexport abstract class FetchFactory {\n  abstract fetch: typeof fetch;\n}\n\nfunction noop(): void {}\n\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise: Promise<unknown>) {\n  promise.then(noop, noop);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EnvironmentInjector, inject, Injectable, InjectionToken, ɵInitialRenderPendingTasks as InitialRenderPendingTasks} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http-intercept-requests-and-responses)\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector.\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the\n * interceptors provided in the root module.\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * Represents the next interceptor in an interceptor chain, or the real backend if there are no\n * further interceptors.\n *\n * Most interceptors will delegate to this function, and either modify the outgoing request or the\n * response when it arrives. Within the scope of the current request, however, this function may be\n * called any number of times, for any number of downstream requests. Such downstream requests need\n * not be to the same URL or even the same origin as the current request. It is also valid to not\n * call the downstream handler at all, and process the current request entirely within the\n * interceptor.\n *\n * This function should only be called within the scope of the request that's currently being\n * intercepted. Once that request is complete, this downstream handler function should not be\n * called.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http-intercept-requests-and-responses)\n */\nexport type HttpHandlerFn = (req: HttpRequest<unknown>) => Observable<HttpEvent<unknown>>;\n\n/**\n * An interceptor for HTTP requests made via `HttpClient`.\n *\n * `HttpInterceptorFn`s are middleware functions which `HttpClient` calls when a request is made.\n * These functions have the opportunity to modify the outgoing request or any response that comes\n * back, as well as block, redirect, or otherwise change the request or response semantics.\n *\n * An `HttpHandlerFn` representing the next interceptor (or the backend which will make a real HTTP\n * request) is provided. Most interceptors will delegate to this function, but that is not required\n * (see `HttpHandlerFn` for more details).\n *\n * `HttpInterceptorFn`s have access to `inject()` via the `EnvironmentInjector` from which they were\n * configured.\n */\nexport type HttpInterceptorFn = (req: HttpRequest<unknown>, next: HttpHandlerFn) =>\n    Observable<HttpEvent<unknown>>;\n\n/**\n * Function which invokes an HTTP interceptor chain.\n *\n * Each interceptor in the interceptor chain is turned into a `ChainedInterceptorFn` which closes\n * over the rest of the chain (represented by another `ChainedInterceptorFn`). The last such\n * function in the chain will instead delegate to the `finalHandlerFn`, which is passed down when\n * the chain is invoked.\n *\n * This pattern allows for a chain of many interceptors to be composed and wrapped in a single\n * `HttpInterceptorFn`, which is a useful abstraction for including different kinds of interceptors\n * (e.g. legacy class-based interceptors) in the same chain.\n */\ntype ChainedInterceptorFn<RequestT> = (req: HttpRequest<RequestT>, finalHandlerFn: HttpHandlerFn) =>\n    Observable<HttpEvent<RequestT>>;\n\nfunction interceptorChainEndFn(\n    req: HttpRequest<any>, finalHandlerFn: HttpHandlerFn): Observable<HttpEvent<any>> {\n  return finalHandlerFn(req);\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(\n    chainTailFn: ChainedInterceptorFn<any>,\n    interceptor: HttpInterceptor): ChainedInterceptorFn<any> {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n  });\n}\n\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(\n    chainTailFn: ChainedInterceptorFn<unknown>, interceptorFn: HttpInterceptorFn,\n    injector: EnvironmentInjector): ChainedInterceptorFn<unknown> {\n  // clang-format off\n  return (initialRequest, finalHandlerFn) => injector.runInContext(() =>\n    interceptorFn(\n      initialRequest,\n      downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n    )\n  );\n  // clang-format on\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS =\n    new InjectionToken<HttpInterceptor[]>(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nexport const HTTP_INTERCEPTOR_FNS =\n    new InjectionToken<HttpInterceptorFn[]>(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nexport const HTTP_ROOT_INTERCEPTOR_FNS =\n    new InjectionToken<HttpInterceptorFn[]>(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nexport function legacyInterceptorFnFactory(): HttpInterceptorFn {\n  let chain: ChainedInterceptorFn<any>|null = null;\n\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {optional: true}) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(\n          adaptLegacyInterceptorToChain, interceptorChainEndFn as ChainedInterceptorFn<any>);\n    }\n\n    const pendingTasks = inject(InitialRenderPendingTasks);\n    const taskId = pendingTasks.add();\n    return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n  };\n}\n\n@Injectable()\nexport class HttpInterceptorHandler extends HttpHandler {\n  private chain: ChainedInterceptorFn<unknown>|null = null;\n  private readonly pendingTasks = inject(InitialRenderPendingTasks);\n\n  constructor(private backend: HttpBackend, private injector: EnvironmentInjector) {\n    super();\n  }\n\n  override handle(initialRequest: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set([\n        ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n        ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n      ]));\n\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight(\n          (nextSequencedFn, interceptorFn) =>\n              chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector),\n          interceptorChainEndFn as ChainedInterceptorFn<unknown>);\n    }\n\n    const taskId = this.pendingTasks.add();\n    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest))\n        .pipe(finalize(() => this.pendingTasks.remove(taskId)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse, HttpStatusCode} from './response';\n\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument: Document|undefined;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nexport const JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext {\n  [key: string]: (data: any) => void;\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  /**\n   * A resolved promise that can be used to schedule microtasks in the event handlers.\n   */\n  private readonly resolvedPromise = Promise.resolve();\n\n  constructor(private callbackMap: JsonpCallbackContext, @Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any|null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK),\n            }));\n            return;\n          }\n\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(new HttpResponse({\n            body,\n            status: HttpStatusCode.Ok,\n            statusText: 'OK',\n            url,\n          }));\n\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n\n  private removeListeners(script: HTMLScriptElement): void {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    if (!foreignDocument) {\n      foreignDocument = (this.document.implementation as DOMImplementation).createHTMLDocument();\n    }\n    foreignDocument.adoptNode(script);\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nexport function jsonpInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req as HttpRequest<never>);\n  }\n\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () => jsonpInterceptorFn(\n            initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {XhrFactory} from '@angular/common';\nimport {Injectable, ɵRuntimeError as RuntimeError} from '@angular/core';\nimport {from, Observable, Observer, of} from 'rxjs';\nimport {switchMap} from 'rxjs/operators';\n\nimport {HttpBackend} from './backend';\nimport {RuntimeErrorCode} from './errors';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpStatusCode, HttpUploadProgressEvent} from './response';\n\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new RuntimeError(\n          RuntimeErrorCode.MISSING_JSONP_MODULE,\n          (typeof ngDevMode === 'undefined' || ngDevMode) &&\n              `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n    }\n\n    // Check whether this factory has a special function to load an XHR implementation\n    // for various non-browser environments. We currently limit it to only `ServerXhr`\n    // class, which needs to load an XHR implementation.\n    const xhrFactory: XhrFactory&{ɵloadImpl?: () => Promise<void>} = this.xhrFactory;\n    const source: Observable<void|null> =\n        xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n\n    return source.pipe(\n        switchMap(() => {\n          // Everything happens on Observable subscription.\n          return new Observable((observer: Observer<HttpEvent<any>>) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials\n            // flag.\n            const xhr = xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (req.withCredentials) {\n              xhr.withCredentials = true;\n            }\n\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n              xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n              const detectedType = req.detectContentTypeHeader();\n              // Sometimes Content-Type detection fails.\n              if (detectedType !== null) {\n                xhr.setRequestHeader('Content-Type', detectedType);\n              }\n            }\n\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n              const responseType = req.responseType.toLowerCase();\n\n              // JSON responses need to be processed as text. This is because if the server\n              // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n              // xhr.response will be null, and xhr.responseText cannot be accessed to\n              // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n              // is parsed by first requesting text and then applying JSON.parse.\n              xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n            }\n\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse: HttpHeaderResponse|null = null;\n\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = (): HttpHeaderResponse => {\n              if (headerResponse !== null) {\n                return headerResponse;\n              }\n\n              const statusText = xhr.statusText || 'OK';\n\n              // Parse headers from XMLHttpRequest - this step is lazy.\n              const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n              // Read the response URL from the XMLHttpResponse instance and fall back on the\n              // request URL.\n              const url = getResponseUrl(xhr) || req.url;\n\n              // Construct the HttpHeaderResponse and memoize it.\n              headerResponse =\n                  new HttpHeaderResponse({headers, status: xhr.status, statusText, url});\n              return headerResponse;\n            };\n\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n              // Read response state from the memoized partial data.\n              let {headers, status, statusText, url} = partialFromXhr();\n\n              // The body will be read out if present.\n              let body: any|null = null;\n\n              if (status !== HttpStatusCode.NoContent) {\n                // Use XMLHttpRequest.response if set, responseText otherwise.\n                body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n              }\n\n              // Normalize another potential bug (this one comes from CORS).\n              if (status === 0) {\n                status = !!body ? HttpStatusCode.Ok : 0;\n              }\n\n              // ok determines whether the response will be transmitted on the event or\n              // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n              // but a successful status code can still result in an error if the user\n              // asked for JSON data and the body cannot be parsed as such.\n              let ok = status >= 200 && status < 300;\n\n              // Check whether the body needs to be parsed as JSON (in many cases the browser\n              // will have done that already).\n              if (req.responseType === 'json' && typeof body === 'string') {\n                // Save the original body, before attempting XSSI prefix stripping.\n                const originalBody = body;\n                body = body.replace(XSSI_PREFIX, '');\n                try {\n                  // Attempt the parse. If it fails, a parse error should be delivered to the\n                  // user.\n                  body = body !== '' ? JSON.parse(body) : null;\n                } catch (error) {\n                  // Since the JSON.parse failed, it's reasonable to assume this might not have\n                  // been a JSON response. Restore the original body (including any XSSI prefix)\n                  // to deliver a better error response.\n                  body = originalBody;\n\n                  // If this was an error request to begin with, leave it as a string, it\n                  // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                  if (ok) {\n                    // Even though the response status was 2xx, this is still an error.\n                    ok = false;\n                    // The parse error contains the text of the body that failed to parse.\n                    body = {error, text: body} as HttpJsonParseError;\n                  }\n                }\n              }\n\n              if (ok) {\n                // A successful response is delivered on the event stream.\n                observer.next(new HttpResponse({\n                  body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }));\n                // The full body has been received and delivered, no further events\n                // are possible. This request is complete.\n                observer.complete();\n              } else {\n                // An unsuccessful request is delivered on the error channel.\n                observer.error(new HttpErrorResponse({\n                  // The error in this case is the response body (error from the server).\n                  error: body,\n                  headers,\n                  status,\n                  statusText,\n                  url: url || undefined,\n                }));\n              }\n            };\n\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error: ProgressEvent) => {\n              const {url} = partialFromXhr();\n              const res = new HttpErrorResponse({\n                error,\n                status: xhr.status || 0,\n                statusText: xhr.statusText || 'Unknown Error',\n                url: url || undefined,\n              });\n              observer.error(res);\n            };\n\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progress event.\n            let sentHeaders = false;\n\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event: ProgressEvent) => {\n              // Send the HttpResponseHeaders event if it hasn't been sent already.\n              if (!sentHeaders) {\n                observer.next(partialFromXhr());\n                sentHeaders = true;\n              }\n\n              // Start building the download progress event to deliver on the response\n              // event stream.\n              let progressEvent: HttpDownloadProgressEvent = {\n                type: HttpEventType.DownloadProgress,\n                loaded: event.loaded,\n              };\n\n              // Set the total number of bytes in the event if it's available.\n              if (event.lengthComputable) {\n                progressEvent.total = event.total;\n              }\n\n              // If the request was for text content and a partial response is\n              // available on XMLHttpRequest, include it in the progress event\n              // to allow for streaming reads.\n              if (req.responseType === 'text' && !!xhr.responseText) {\n                progressEvent.partialText = xhr.responseText;\n              }\n\n              // Finally, fire the event.\n              observer.next(progressEvent);\n            };\n\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event: ProgressEvent) => {\n              // Upload progress events are simpler. Begin building the progress\n              // event.\n              let progress: HttpUploadProgressEvent = {\n                type: HttpEventType.UploadProgress,\n                loaded: event.loaded,\n              };\n\n              // If the total number of bytes being uploaded is available, include\n              // it.\n              if (event.lengthComputable) {\n                progress.total = event.total;\n              }\n\n              // Send the event.\n              observer.next(progress);\n            };\n\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n              // Download progress is always enabled if requested.\n              xhr.addEventListener('progress', onDownProgress);\n\n              // Upload progress depends on whether there is a body to upload.\n              if (reqBody !== null && xhr.upload) {\n                xhr.upload.addEventListener('progress', onUpProgress);\n              }\n            }\n\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody!);\n            observer.next({type: HttpEventType.Sent});\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n              // On a cancellation, remove all registered event listeners.\n              xhr.removeEventListener('error', onError);\n              xhr.removeEventListener('abort', onError);\n              xhr.removeEventListener('load', onLoad);\n              xhr.removeEventListener('timeout', onError);\n\n              if (req.reportProgress) {\n                xhr.removeEventListener('progress', onDownProgress);\n                if (reqBody !== null && xhr.upload) {\n                  xhr.upload.removeEventListener('progress', onUpProgress);\n                }\n              }\n\n              // Finally, abort the in-flight request.\n              if (xhr.readyState !== xhr.DONE) {\n                xhr.abort();\n              }\n            };\n          });\n        }),\n    );\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ɵparseCookieValue as parseCookieValue} from '@angular/common';\nimport {EnvironmentInjector, Inject, inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpHandlerFn, HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_ENABLED = new InjectionToken<boolean>('XSRF_ENABLED');\n\nexport const XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\n\nexport const XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\nexport function xsrfInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n      lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({headers: req.headers.set(headerName, token)});\n  }\n  return next(req);\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(private injector: EnvironmentInjector) {}\n\n  intercept(initialRequest: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return this.injector.runInContext(\n        () =>\n            xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EnvironmentProviders, inject, InjectionToken, makeEnvironmentProviders, Provider} from '@angular/core';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {FetchBackend} from './fetch';\nimport {HTTP_INTERCEPTOR_FNS, HttpInterceptorFn, HttpInterceptorHandler, legacyInterceptorFnFactory} from './interceptor';\nimport {jsonpCallbackContext, JsonpCallbackContext, JsonpClientBackend, jsonpInterceptorFn} from './jsonp';\nimport {HttpXhrBackend} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_ENABLED, XSRF_HEADER_NAME, xsrfInterceptorFn} from './xsrf';\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nexport enum HttpFeatureKind {\n  Interceptors,\n  LegacyInterceptors,\n  CustomXsrfConfiguration,\n  NoXsrfProtection,\n  JsonpSupport,\n  RequestsMadeViaParent,\n  Fetch,\n}\n\n/**\n * A feature for use when configuring `provideHttpClient`.\n *\n * @publicApi\n */\nexport interface HttpFeature<KindT extends HttpFeatureKind> {\n  ɵkind: KindT;\n  ɵproviders: Provider[];\n}\n\nfunction makeHttpFeature<KindT extends HttpFeatureKind>(\n    kind: KindT, providers: Provider[]): HttpFeature<KindT> {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers,\n  };\n}\n\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nexport function provideHttpClient(...features: HttpFeature<HttpFeatureKind>[]):\n    EnvironmentProviders {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.ɵkind));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n        featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(\n          ngDevMode ?\n              `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n              '');\n    }\n  }\n\n  const providers: Provider[] = [\n    HttpClient,\n    HttpXhrBackend,\n    HttpInterceptorHandler,\n    {provide: HttpHandler, useExisting: HttpInterceptorHandler},\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: xsrfInterceptorFn,\n      multi: true,\n    },\n    {provide: XSRF_ENABLED, useValue: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n  ];\n\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nexport function withInterceptors(interceptorFns: HttpInterceptorFn[]):\n    HttpFeature<HttpFeatureKind.Interceptors> {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true,\n    };\n  }));\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken<HttpInterceptorFn>('LEGACY_INTERCEPTOR_FN');\n\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nexport function withInterceptorsFromDi(): HttpFeature<HttpFeatureKind.LegacyInterceptors> {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n    {\n      provide: LEGACY_INTERCEPTOR_FN,\n      useFactory: legacyInterceptorFnFactory,\n    },\n    {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useExisting: LEGACY_INTERCEPTOR_FN,\n      multi: true,\n    }\n  ]);\n}\n\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withXsrfConfiguration(\n    {cookieName, headerName}: {cookieName?: string, headerName?: string}):\n    HttpFeature<HttpFeatureKind.CustomXsrfConfiguration> {\n  const providers: Provider[] = [];\n  if (cookieName !== undefined) {\n    providers.push({provide: XSRF_COOKIE_NAME, useValue: cookieName});\n  }\n  if (headerName !== undefined) {\n    providers.push({provide: XSRF_HEADER_NAME, useValue: headerName});\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nexport function withNoXsrfProtection(): HttpFeature<HttpFeatureKind.NoXsrfProtection> {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n    {\n      provide: XSRF_ENABLED,\n      useValue: false,\n    },\n  ]);\n}\n\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nexport function withJsonpSupport(): HttpFeature<HttpFeatureKind.JsonpSupport> {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true},\n  ]);\n}\n\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nexport function withRequestsMadeViaParent(): HttpFeature<HttpFeatureKind.RequestsMadeViaParent> {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n    {\n      provide: HttpBackend,\n      useFactory: () => {\n        const handlerFromParent = inject(HttpHandler, {skipSelf: true, optional: true});\n        if (ngDevMode && handlerFromParent === null) {\n          throw new Error(\n              'withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n        }\n        return handlerFromParent;\n      },\n    },\n  ]);\n}\n\n\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * This `FetchBackend` requires the support of the Fetch API which is available on all evergreen\n * browsers and on NodeJS from v18 onward.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n * @developerPreview\n */\nexport function withFetch(): HttpFeature<HttpFeatureKind.Fetch> {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof fetch !== 'function') {\n    // TODO: Create a runtime error\n    // TODO: Use ENVIRONMENT_INITIALIZER to contextualize the error message (browser or server)\n    throw new Error(\n        'The `withFetch` feature of HttpClient requires the `fetch` API to be available. ' +\n        'If you run the code in a Node environment, make sure you use Node v18.10 or later.');\n  }\n\n  return makeHttpFeature(HttpFeatureKind.Fetch, [\n    FetchBackend,\n    {provide: HttpBackend, useExisting: FetchBackend},\n  ]);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {HTTP_INTERCEPTORS} from './interceptor';\nimport {provideHttpClient, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withXsrfConfiguration} from './provider';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_DEFAULT_COOKIE_NAME, XSRF_DEFAULT_HEADER_NAME, XSRF_ENABLED} from './xsrf';\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    withXsrfConfiguration({\n      cookieName: XSRF_DEFAULT_COOKIE_NAME,\n      headerName: XSRF_DEFAULT_HEADER_NAME,\n    }).ɵproviders,\n    {provide: XSRF_ENABLED, useValue: true},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        withNoXsrfProtection().ɵproviders,\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders,\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    provideHttpClient(withInterceptorsFromDi()),\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    withJsonpSupport().ɵproviders,\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_BOOTSTRAP_LISTENER, ApplicationRef, inject, InjectionToken, makeStateKey, Provider, StateKey, TransferState, ɵENABLED_SSR_FEATURES as ENABLED_SSR_FEATURES} from '@angular/core';\nimport {Observable, of} from 'rxjs';\nimport {first, tap} from 'rxjs/operators';\n\nimport {HttpHeaders} from './headers';\nimport {HTTP_ROOT_INTERCEPTOR_FNS, HttpHandlerFn} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\ninterface TransferHttpResponse {\n  body: any;\n  headers: Record<string, string[]>;\n  status?: number;\n  statusText?: string;\n  url?: string;\n  responseType?: HttpRequest<unknown>['responseType'];\n}\n\nconst CACHE_STATE = new InjectionToken<{isCacheActive: boolean}>(\n    ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_STATE' : '');\n\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\n\nexport function transferCacheInterceptorFn(\n    req: HttpRequest<unknown>, next: HttpHandlerFn): Observable<HttpEvent<unknown>> {\n  const {isCacheActive} = inject(CACHE_STATE);\n\n  // Stop using the cache if the application has stabilized, indicating initial rendering\n  // is complete.\n  if (!isCacheActive || !ALLOWED_METHODS.includes(req.method)) {\n    // Cache is no longer active or method is not HEAD or GET.\n    // Pass the request through.\n    return next(req);\n  }\n\n  const transferState = inject(TransferState);\n  const storeKey = makeCacheKey(req);\n  const response = transferState.get(storeKey, null);\n\n  if (response) {\n    // Request found in cache. Respond using it.\n    let body: ArrayBuffer|Blob|string|undefined = response.body;\n\n    switch (response.responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(response.body).buffer;\n        break;\n      case 'blob':\n        body = new Blob([response.body]);\n        break;\n    }\n\n    return of(\n        new HttpResponse({\n          body,\n          headers: new HttpHeaders(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n        }),\n    );\n  }\n\n  // Request not found in cache. Make the request and cache it.\n  return next(req).pipe(\n      tap((event: HttpEvent<unknown>) => {\n        if (event instanceof HttpResponse) {\n          transferState.set<TransferHttpResponse>(storeKey, {\n            body: event.body,\n            headers: getHeadersMap(event.headers),\n            status: event.status,\n            statusText: event.statusText,\n            url: event.url || '',\n            responseType: req.responseType,\n          });\n        }\n      }),\n  );\n}\n\nfunction getHeadersMap(headers: HttpHeaders): Record<string, string[]> {\n  const headersMap: Record<string, string[]> = {};\n\n  for (const key of headers.keys()) {\n    const values = headers.getAll(key);\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\nfunction makeCacheKey(request: HttpRequest<any>): StateKey<TransferHttpResponse> {\n  // make the params encoded same as a url so it's easy to identify\n  const {params, method, responseType, url} = request;\n  const encodedParams = params.keys().sort().map((k) => `${k}=${params.getAll(k)}`).join('&');\n  const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n\n  const hash = generateHash(key);\n\n  return makeStateKey(hash);\n}\n\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value: string): string {\n  let hash = 0;\n\n  for (const char of value) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  }\n\n  // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n  hash += 2147483647 + 1;\n\n  return hash.toString();\n}\n\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nexport function withHttpTransferCache(): Provider[] {\n  return [\n    {\n      provide: CACHE_STATE,\n      useFactory: () => {\n        inject(ENABLED_SSR_FEATURES).add('httpcache');\n        return {isCacheActive: true};\n      }\n    },\n    {\n      provide: HTTP_ROOT_INTERCEPTOR_FNS,\n      useValue: transferCacheInterceptorFn,\n      multi: true,\n      deps: [TransferState, CACHE_STATE]\n    },\n    {\n      provide: APP_BOOTSTRAP_LISTENER,\n      multi: true,\n      useFactory: () => {\n        const appRef = inject(ApplicationRef);\n        const cacheState = inject(CACHE_STATE);\n\n        return () => {\n          appRef.isStable.pipe(first((isStable) => isStable)).toPromise().then(() => {\n            cacheState.isCacheActive = false;\n          });\n        };\n      }\n    }\n  ];\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}